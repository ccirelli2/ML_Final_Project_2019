# Step1:  Set up training control
data_ctrl = trainControl(method = 'cv', number = 10, verboseIter = TRUE, metric = "Accuracy")
data_ctrl_loocv = trainControl(method = 'LOOCV', number = 10, verboseIter = TRUE)
lr.m1.cv.loocv = train(num ~ age + sex + cp + trestbps + chol + fbs + restecg + thalach + exang + oldpeak + slope + ca + thal, # model to fit
data = data.cat,                                                       # data
method = 'glm',                                                        # general linear model
family = 'binomial',                                                   # binomial for logistic regression
trControl = data_ctrl_loocv                                                  # pass training control parameters.
)
lr.m1.cv.loocv
lda.m1.cv =        train(num ~., # model to fit
data = data.cat,                                                       # data
method = 'lda',                                                        # general linear model
family = 'binomial',                                                   # binomial for logistic regression
trControl = data_ctrl_loocv                                                  # pass training control parameters.
)
lda.m1.cv.loocv =        train(num ~., # model to fit
data = data.cat,                                                       # data
method = 'lda',                                                        # general linear model
family = 'binomial',                                                   # binomial for logistic regression
trControl = data_ctrl_loocv                                                  # pass training control parameters.
)
lda.m1.cv.loocv
qda.m1.cv,loocv =        train(num ~., # model to fit
data = data.cat,                                                       # data
method = 'qda',                                                        # general linear model
family = 'binomial',                                                   # binomial for logistic regression
trControl = data_ctrl_loocv                                                  # pass training control parameters.
)
qda.m1.cv.loocv =        train(num ~., # model to fit
data = data.cat,                                                       # data
method = 'qda',                                                        # general linear model
family = 'binomial',                                                   # binomial for logistic regression
trControl = data_ctrl_loocv                                                  # pass training control parameters.
)
qda.m1.cv.loocv
# Clean Namespace
rm(list = ls())
# LOAD LIBRARIES
library(RMySQL)
# CLEAR NAMESPACE
rm(list = ls())
# LOAD LIBRARIES
library(RMySQL)
# SETUP CONNECTION TO DB
mydb <- dbConnect(RMySQL::MySQL(), user='ccirelli2',
password='Work4starr', dbname='GSU',
host = "127.0.0.1")
# Get List of Tables
dbListTables(mydb)
query1_alldata = dbSendQuery(mydb, '
SELECT
MONTH(pickup_datetime) AS "MONTH",
DAY(pickup_datetime) AS "DAY",
pickup_x,
pickup_y,
dropoff_x,
dropoff_y,
duration
FROM ML_FinProj_GothamCab_Train
WHERE duration != 0
LIMIT 1000')
result_q1 = fetch(query1_alldata, n = -1)
# Query 2:  Average Duration By Month
query2_rel_month_duration = dbSendQuery(mydb, '
SELECT
MONTH(pickup_datetime) AS "MONTH",
ROUND(AVG(duration),0) AS "AVERAGE_DURATION"
FROM GSU.ML_FinProj_GothamCab_Train
GROUP BY MONTH(pickup_datetime)
ORDER BY ROUND(AVG(duration),0);')
result_q2 = fetch(query2_rel_month_duration, n = -1)
barplot(data_q2$AVERAGE_DURATION, names.arg = data_q2$MONTH,
main = "Avg Duration By Month",
xlab = "Month",
ylab = "Duration")
barplot(data_q2$AVERAGE_DURATION, names.arg = result_q2$MONTH,
main = "Avg Duration By Month",
xlab = "Month",
ylab = "Duration")
barplot(result_q2$AVERAGE_DURATION, names.arg = result_q2$MONTH,
main = "Avg Duration By Month",
xlab = "Month",
ylab = "Duration")
# Query 3 - Relationship of Average Duration By Day of Week
query3_rel_day_duration = dbSendQuery(mydb, '
SELECT
DAY(pickup_datetime) AS "DAY",
ROUND(AVG(duration),0) AS "AVERAGE_DURATION"
FROM GSU.ML_FinProj_GothamCab_Train
GROUP BY DAY(pickup_datetime)
ORDER BY DAY(pickup_datetime);')
result_q3 = fetch(query3_rel_day_duration, n = -1)
barplot(result_q3$AVERAGE_DURATION,
names.arg = result_q3$DAY,
main = "Average Duration By Day Of Week",
xlab = "Day",
ylab = "Duration")
test_date = 2012-02-01
test_date = weekdays(as.Date(2012-02-01))
test_date = weekdays(as.Date('2012-02-01'))
test_date
test_date = weekdays(as.Date('2034-01-01'))
test_date
query4_rel_weekday_duration = dbSendQuery(mydb, '
SELECT
Weekday,
ROUND(AVG(duration),0) AS "AVERAGE_DURATION"
FROM GSU.ML_FinProj_GothamCab_Train
GROUP BY Weekday
ORDER BY DAY(pickup_datetime);')
query4_rel_weekday_duration = dbSendQuery(mydb, '
SELECT
Weekday,
ROUND(AVG(duration),0) AS "AVERAGE_DURATION"
FROM GSU.ML_FinProj_GothamCab_Train
GROUP BY Weekday
ORDER BY Weekday;')
result_q4 = fetch(query4_rel_weekday_duration, n = -1)
barplot(result_q3$AVERAGE_DURATION,
names.arg = result_q3$DAY,
main = "Average Duration By Weekday",
xlab = "Weekday",
ylab = "Duration")
barplot(result_q4$AVERAGE_DURATION,
names.arg = result_q4$Weekday,
main = "Average Duration By Weekday",
xlab = "Weekday",
ylab = "Duration")
print(result_q4.head())
print(result_q4)
boxplot(result_q4)
boxplot(result_q1$duration)
result_q1$duration
plot(result_q1$duration)
boxplot(result_q1$duration)
histogram(result_q1$duration)
hist(result_q1$duration)
density(result_q1$duration)
d = density(result_q1$duration)
plot(d)
query5_rel_route_duration = dbSendQuery(mydb, '
SELECT
pickup_x,
pickup_y,
dropoff_x,
dropoff_y,
COUNT(duration) AS "Route Count"
FROM GSU.ML_FinProj_GothamCab_Train
GROUP BY pickup_x, pickup_y, dropoff_x, dropoff_y
ORDER BY COUNT(duration) DESC'
)
# Plot Durations
plot(result_q1$duration)
boxplot(result_q1$duration)
hist(result_q1$duration)
d = density(result_q1$duration)
plot(d)
## CLEAR NAMESPACE________________________________________________________________________
rm(list = ls())
## IMPORT LIBRARIES_______________________________________________________________________
library(lattice)
library(ggplot2)
library(caret)  # used for parameter tuning
## CREATE DATASET_________________________________________________________________________
setwd('/home/ccirelli2/Desktop/Repositories/ML_Final_Project_2019/Gotham_Cabs/data')
s1.50k.nolimits        = read.csv('sample1_50k.csv')[2:12]                          #[2:12] drop datetime col.
s2.100k.nolimits       = read.csv('sample1_100k.csv')[2:12]
s3.250k.nolimits       = read.csv('sample1_250k.csv')[2:12]
s4.50k.wlimits         = read.csv('sample2_wlimits_50k.csv')[2:12]
s5.100k.wlimits        = read.csv('sample2_wlimits_100k.csv')[2:12]
s6.250k.wlimits        = read.csv('sample2_wlimits_250k.csv')[2:12]
# SET SEED FOR ENTIRE CODE________________________________________________________________
set.seed(123)
# RANDOMIZE DATA__________________________________________________________________________
s1.50k.nolimits_ran    = s1.50k.nolimits[sample(nrow(s1.50k.nolimits)),]
s2.100k.nolimits_ran   = s2.100k.nolimits[sample(nrow(s2.100k.nolimits)),]
s3.250k.nolimits_ran   = s3.250k.nolimits[sample(nrow(s3.250k.nolimits)),]
s4.50k.wlimits_ran     = s4.50k.wlimits[sample(nrow(s4.50k.wlimits)), ]
s5.100k.wlimits_ran    = s5.100k.wlimits[sample(nrow(s5.100k.wlimits)), ]
s6.250k.wlimits_ran    = s6.250k.wlimits[sample(nrow(s6.250k.wlimits)), ]
# Calculate Number of Training Observations
train_nrows_50k  = (nrow(s1.50k.nolimits)  * .7)
train_nrows_100k = (nrow(s2.100k.nolimits)   * .7)
train_nrows_250k = (nrow(s3.250k.nolimits)   * .7)
# Train
s1.train = s1.50k.nolimits_ran[1:  (nrow(s1.50k.nolimits_ran)  * .7), ]
s2.train = s2.100k.nolimits_ran[1: (nrow(s2.100k.nolimits_ran) * .7), ]
s3.train = s3.250k.nolimits_ran[1: (nrow(s2.100k.nolimits_ran) * .7), ]
s4.train = s4.50k.wlimits_ran[1:   (nrow(s4.50k.wlimits_ran)  * .7), ]
s5.train = s5.100k.wlimits_ran[1:  (nrow(s5.100k.wlimits_ran)  * .7), ]
s6.train = s6.250k.wlimits_ran[1:  (nrow(s6.250k.wlimits_ran)  * .7), ]
# Test
s1.test = s1.50k.nolimits_ran[train_nrows_50k:    nrow(s1.50k.nolimits_ran), ] # Index from training to total
s2.test = s2.100k.nolimits_ran[train_nrows_100k:  nrow(s2.100k.nolimits_ran), ]
s3.test = s3.250k.nolimits_ran[train_nrows_250k:  nrow(s3.250k.nolimits_ran), ]
s4.test = s4.50k.wlimits_ran[train_nrows_50k:     nrow(s4.50k.wlimits_ran), ]
s5.test = s5.100k.wlimits_ran[train_nrows_100k:   nrow(s5.100k.wlimits_ran), ]
s6.test = s6.250k.wlimits_ran[train_nrows_250k:   nrow(s6.250k.wlimits_ran), ]
install.packages(ridge)
install.packages('ridge')
library(ridge)
library(ridge)
install.packages("ridge")
library(ridge)
library(glmnet)
# M1:   TRAIN MULTILINEAR MODEL (NO REGRESSION)
m1.mlr = lm(duration ~ ., data = s1.train)
m1.summary = summary(m1.mlr)
m1.summary
m1.summary$coefficients
m1.summary$residuals
m1.mse = sum(m1.summary$residuals^2)
m1.mse = sqrt(sum(m1.summary$residuals^2))
m1.rse = sqrt(sum(m1.summary$residuals^2))
rse
m1.rse
m1.summary
m1.rse = sqrt((sum(m1.summary$residuals^2)) / nrow(s1.train))
m1.rse
library(pls)
library(ISLR)
# Generate Grid Possible Values Lambda
grid=10^seq(10,-2,length=100)
grid
# Generate Grid Possible Values Lambda
grid=seq(10,-2,length=100)
grid
?seq
10^grid
10^10
# Generate Grid Possible Values Lambda
grid = 10^seq(from = 10, to = -2, length = 100)                 #length = desired length of sequence
grid
hist(grid)
plot(grid)
1*10^10
1*10^2
X = s1.50k.nolimits_ran[, 2:]
X = s1.50k.nolimits_ran[, 2:12]
X = s1.50k.nolimits_ran[0:50000, 2:12]
X = s1.50k.nolimits_ran[0:50000, ]
X = s1.50k.nolimits_ran[0:50000, 2:11]
head(X)
# Separate Target & Feature Values
Y = s1.50k.nolimits_ran$duration
X = s1.50k.nolimits_ran[0:50000, 2:11]
# Separate Target & Feature Values
Y = s1.50k.nolimits_ran$duration
X = s1.50k.nolimits_ran[0:50000, 2:11]
# Generate Grid Possible Values Lambda
grid = 10^seq(from = 10, to = -2, length = 100)                 #length = desired length of sequence
m2.mlr.l2 = glmet(X , Y, alpha=0, lambda=grid)
m2.mlr.l2 = glmnet(X , Y, alpha=0, lambda=grid)
rm(list = ls())
graphics.off()
library(ISLR)
library(glmnet)
library(pls)
# eliminating the NA entries
names(Hitters)
dim(Hitters)
Hitters
?Hitters
sum(is.na(Hitters$Salary))
Hitters=na.omit(Hitters)
dim(Hitters)
x=model.matrix(Salary~.,Hitters)[,-1]
y=Hitters$Salary
x
model.matrix(duration ~ ., data = s1.50k.nolimits_ran[, 2:11])
## IMPORT LIBRARIES_______________________________________________________________________
library(lattice)
library(ggplot2)
library(caret)  # used for parameter tuning
library(glmnet)
library(pls)
library(ISLR)
## CREATE DATASET_________________________________________________________________________
setwd('/home/ccirelli2/Desktop/Repositories/ML_Final_Project_2019/Gotham_Cabs/data')
s1.50k.nolimits        = read.csv('sample1_50k.csv')[2:12]                          #[2:12] drop datetime col.
s2.100k.nolimits       = read.csv('sample1_100k.csv')[2:12]
s3.250k.nolimits       = read.csv('sample1_250k.csv')[2:12]
s4.50k.wlimits         = read.csv('sample2_wlimits_50k.csv')[2:12]
s5.100k.wlimits        = read.csv('sample2_wlimits_100k.csv')[2:12]
s6.250k.wlimits        = read.csv('sample2_wlimits_250k.csv')[2:12]
# SET SEED FOR ENTIRE CODE________________________________________________________________
set.seed(123)
# RANDOMIZE DATA__________________________________________________________________________
s1.50k.nolimits_ran    = s1.50k.nolimits[sample(nrow(s1.50k.nolimits)),]
s2.100k.nolimits_ran   = s2.100k.nolimits[sample(nrow(s2.100k.nolimits)),]
s3.250k.nolimits_ran   = s3.250k.nolimits[sample(nrow(s3.250k.nolimits)),]
s4.50k.wlimits_ran     = s4.50k.wlimits[sample(nrow(s4.50k.wlimits)), ]
s5.100k.wlimits_ran    = s5.100k.wlimits[sample(nrow(s5.100k.wlimits)), ]
s6.250k.wlimits_ran    = s6.250k.wlimits[sample(nrow(s6.250k.wlimits)), ]
model.matrix(duration ~ ., data = s1.50k.nolimits_ran[, 2:11])
model.matrix(s1.50k.nolimits_ran$duration ~ ., data = s1.50k.nolimits_ran[, 2:11])
# Separate Target & Feature Values
Y = s1.50k.nolimits_ran$duration
# Separate Target & Feature Values
Y = s1.50k.nolimits_ran$duration
X = model.matrix(s1.50k.nolimits_ran$duration ~ ., data = s1.50k.nolimits_ran[, 2:11])
# Generate Grid Possible Values Lambda
grid = 10^seq(from = 10, to = -2, length = 100)                 #length = desired length of sequence
m2.mlr.l2 = glmnet(X , Y, alpha=0, lambda=grid)
summary(m2.mlr.l2)
print(sqrt(sum(coef(m2.mlr.l2)[-1,50]^2)))
print(sqrt(sum(coef(m2.mlr.l2)^2)))
ridge_cv <- cv.glmnet(X, Y, alpha = 0, lambda = grids,
standardize = TRUE, nfolds = 10)
ridge_cv <- cv.glmnet(X, Y, alpha = 0, lambda = grid,
standardize = TRUE, nfolds = 10)
plot(ridge_cv)
plot(ridge_cv, main = "MLR - 10KFOLD USING RIDGE")
# Get CV Lamda
best_lambda = ridge_cv$lambda.min
# Get CV Lamda
best_lambda = ridge_cv$lambda.min
best_lambda
# Get Best Lamda
cv_lambda = ridge_cv$lambda.min
?glmnet
model_cv <- glmnet(X, Y, alpha = 0, lambda = lambda_cv, standardize = TRUE)
model_cv <- glmnet(X, Y, alpha = 0, lambda = cv_lambda, standardize = TRUE)
y_hat_cv <- predict(model_cv, X)
?t()
y_hat_cv
sqrt(sum((Y - y_hat_cv)^2) / (length(Y) - 2))
model_cv_rse = sqrt(sum((Y - y_hat_cv)^2) / (length(Y) - 2))
summary(model_cv)
?model_cv
?glmnet
s2_y = s2.50k.nolimits_ran$duration
## CLEAR NAMESPACE________________________________________________________________________
rm(list = ls())
## IMPORT LIBRARIES_______________________________________________________________________
library(lattice)
library(ggplot2)
library(caret)  # used for parameter tuning
library(glmnet)
library(pls)
library(ISLR)
## CREATE DATASET_________________________________________________________________________
setwd('/home/ccirelli2/Desktop/Repositories/ML_Final_Project_2019/Gotham_Cabs/data')
s1.50k.nolimits        = read.csv('sample1_50k.csv')[2:12]                          #[2:12] drop datetime col.
s2.100k.nolimits       = read.csv('sample1_100k.csv')[2:12]
s3.250k.nolimits       = read.csv('sample1_250k.csv')[2:12]
s4.50k.wlimits         = read.csv('sample2_wlimits_50k.csv')[2:12]
s5.100k.wlimits        = read.csv('sample2_wlimits_100k.csv')[2:12]
s6.250k.wlimits        = read.csv('sample2_wlimits_250k.csv')[2:12]
# SET SEED FOR ENTIRE CODE________________________________________________________________
set.seed(123)
# RANDOMIZE DATA__________________________________________________________________________
s1.50k.nolimits_ran    = s1.50k.nolimits[sample(nrow(s1.50k.nolimits)),]
s2.100k.nolimits_ran   = s2.100k.nolimits[sample(nrow(s2.100k.nolimits)),]
s3.250k.nolimits_ran   = s3.250k.nolimits[sample(nrow(s3.250k.nolimits)),]
s4.50k.wlimits_ran     = s4.50k.wlimits[sample(nrow(s4.50k.wlimits)), ]
s5.100k.wlimits_ran    = s5.100k.wlimits[sample(nrow(s5.100k.wlimits)), ]
s6.250k.wlimits_ran    = s6.250k.wlimits[sample(nrow(s6.250k.wlimits)), ]
s2_y = s2.50k.nolimits_ran$duration
s2_y = s2.100k.nolimits_ran$duration
s2_x = model.matrix(s2.100k.nolimits_ran$duration ~ ., data = s1.50k.nolimits_ran[, 2:11])
s2_x = model.matrix(s2.100k.nolimits_ran$duration ~ ., data = s2.100k.nolimits_ran[, 2:11])
ridge_cv <- function(X, Y, grid, c_alpha, c_plot){
# Train Cross Validation Model
m_cv <- cv.glmnet(X, Y, alpha = c_alpha, lambda = grid, standardize = TRUE, nfolds = 10)
# Plot
if(c_plot == TRUE){
plot(m_cv, main = "MLR - 10KFOLD USING RIDGE")
}
# Get Best Lambda
cv_lambda = m_cv$lambda.min
# Fit Model w/ Best Lambda
m_optimal <- glmnet(X, Y, alpha = c_alpha, lambda = cv_lambda, standardize = TRUE)
y_hat_cv <- predict(m_optimal, X)
model_cv_rse = sqrt(sum((Y - y_hat_cv)^2) / (length(Y) - 2))
}
test_model = ridge_cv(s1_x, s1_y, grid, 0, FALSE)
# Generate Grid Possible Values Lambda
grid = 10^seq(from = 10, to = -2, length = 100)                 #length = desired length of sequence
test_model = ridge_cv(s1_x, s1_y, grid, 0, FALSE)
# Separate Target & Feature Values
s1_y = s1.50k.nolimits_ran$duration
s1_x = model.matrix(s1.50k.nolimits_ran$duration ~ ., data = s1.50k.nolimits_ran[, 2:11])
test_model = ridge_cv(s1_x, s1_y, grid, 0, FALSE)
test_model
test_model = ridge_cv(s1_x, s1_y, grid, 1, FALSE)
test_model
?predict()
# Train Cross Validation Model
m_cv <- cv.glmnet(X, Y, alpha = c_alpha, lambda = grid, standardize = TRUE, nfolds = 10)
m_cv <- cv.glmnet(s1_x, s1_y, alpha = c_alpha, lambda = grid, standardize = TRUE, nfolds = 10)
m_cv <- cv.glmnet(s1_x, s1_y, alpha = 0, lambda = grid, standardize = TRUE, nfolds = 10)
m_cv$lambda
m_cv$lambda[[50]]
m_cv$lambda[50]
print(coef(m_cv))
print(coef(m_cv)[,50])
# Generate Grid Possible Values Lambda
grid = 10^seq(from = 10, to = -2, length = 100)                 #length = desired length of sequence
m_cv <- cv.glmnet(s1_x, s1_y, alpha = 0, lambda = grid, standardize = TRUE, nfolds = 10)
print(coef(m_cv)[,50])
dim(coef(m_cv)[,50])
dim(coef(m_cv))
m_cv <- glmnet(s1_x, s1_y, alpha = 0, lambda = grid, standardize = TRUE)
dim(coef(m_cv))
print(coef(ridge.mod)[,50])
dim(coef(m_cv)[,50])
print((coef(m_cv)[,50]))
library(ISLR)
library(glmnet)
library(pls)
# eliminating the NA entries
names(Hitters)
dim(Hitters)
sum(is.na(Hitters$Salary))
Hitters=na.omit(Hitters)
x=model.matrix(Salary~.,Hitters)[,-1]
y=Hitters$Salary
# a grid for the possible values of lambda
grid=10^seq(10,-2,length=100)
# alpha = 0 --> Ridge, alpha = 1 --> LASSO
ridge.mod=glmnet(x,y,alpha=0,lambda=grid)
# comparing the magnitude of the coefficients for two different lambdas
print(ridge.mod$lambda[50])
print(coef(ridge.mod)[,50])
print(ridge.mod$lambda[60])
print(coef(ridge.mod)[,60])
# Lambda Number 50 From Grid
print((coef(m_cv)[,50]))
print(sqrt(sum(coef(ridge.mod)[-1,50]^2)))
print(sqrt(sum(coef(ridge.mod)[-1,60]^2)))
dim(ridge.mod)
ridge.mod[-1, 60]
coef(ridge.mod)
coef(ridge.mod)[-1]
coef(ridge.mod)[-1, 60]
# Lambda Number 50 From Grid
print(m_cv$lambda[50])
print((coef(m_cv)[,50]))
# 25th Lambda
print(m_cv$lambda[25])           # Value of 50th Lambda
# 25th Lambda
print(m_cv$lambda[25])           # Value of 25th Lambda
# 25th Lambda
print(paste('25th Lambdad =>', m_cv$lambda[25]))           # Value of 25th Lambda
# 25th Lambda
print(paste('25th Lambda =>', m_cv$lambda[25]))           # Value of 25th Lambda
print((coef(m_cv)[,25]))         # Coefficients derived from 25th Lambda
# 75th Lambda
print(paste('75th Lambda =>', m_cv$lambda[75]))           # Value of 75th Lambda
print((coef(m_cv)[,75]))         # Coefficients derived from 75th Lambda
# Ridge
ridge_model = ridge_cv(s1_x, s1_y, grid, c_alpha = 1, FALSE)
# Ridge
ridge_model = ridge_cv(s1_x, s1_y, grid, c_alpha = 0, FALSE)
# Lasso
lasso_model = ridge_cv(s1_x, s1_y, grid, c_alpha = 1, FALSE)
ridge_model
lasso_model
ridge_cv <- function(X, Y, grid, c_alpha, opt_lambda, c_plot){
# Train Cross Validation Model
m_cv <- cv.glmnet(X, Y, alpha = c_alpha, lambda = grid, standardize = TRUE, nfolds = 10)
# Plot RSE vs Lambda Selection
if(c_plot == TRUE){
plot(m_cv, main = "MLR - 10KFOLD USING RIDGE")
}
# Get Best Lambda
cv_lambda = m_cv$lambda.min
if(opt_lambda == TRUE){
print(paste('Optimal lambda =>', cv_lambda))
}
# Fit Model w/ Best Lambda
m_optimal <- glmnet(X, Y, alpha = c_alpha, lambda = cv_lambda, standardize = TRUE)
y_hat_cv <- predict(m_optimal, X)
model_cv_rse = sqrt(sum((Y - y_hat_cv)^2) / (length(Y) - 2))
return(model_cv_rse)
}
# Ridge
ridge_model = ridge_cv(s1_x, s1_y, grid, c_alpha = 0, opt_lambda = TRUE, c_plot = FALSE)
ridge_cv <- function(X, Y, grid, c_alpha, opt_lambda, c_plot){
# Train Cross Validation Model
m_cv <- cv.glmnet(X, Y, alpha = c_alpha, lambda = grid, standardize = TRUE, nfolds = 10)
# Plot RSE vs Lambda Selection
if(c_plot == TRUE){
plot(m_cv, main = "MLR - 10KFOLD USING RIDGE")
}
# Get Best Lambda
cv_lambda = m_cv$lambda.min
if(opt_lambda == TRUE){
print(paste('Optimal lambda =>', round(cv_lambda, 2)))
}
# Fit Model w/ Best Lambda
m_optimal <- glmnet(X, Y, alpha = c_alpha, lambda = cv_lambda, standardize = TRUE)
y_hat_cv <- predict(m_optimal, X)
model_cv_rse = sqrt(sum((Y - y_hat_cv)^2) / (length(Y) - 2))
return(model_cv_rse)
}
# Ridge
ridge_model = ridge_cv(s1_x, s1_y, grid, c_alpha = 0, opt_lambda = TRUE, c_plot = FALSE)
# Lasso
lasso_model = ridge_cv(s1_x, s1_y, grid, c_alpha = 1, opt_lambda = TRUE, c_plot = FALSE)
ridge_model
lasso_model
# M2:   COMPARE COEFFICIENTS USING DIFFERENT LAMBDAS________________________________________
m_cv <- glmnet(s1_x, s1_y, alpha = 1, lambda = grid, standardize = TRUE)
# 25th Lambda
print(paste('25th Lambda =>', m_cv$lambda[25]))           # Value of 25th Lambda
print((coef(m_cv)[,25]))         # Coefficients derived from 25th Lambda
# 75th Lambda
print(paste('75th Lambda =>', m_cv$lambda[75]))           # Value of 75th Lambda
print((coef(m_cv)[,75]))         # Coefficients derived from 75th Lambda
