data = data.cat,                                                       # data
method = 'qda',                                                        # general linear model
family = 'binomial',                                                   # binomial for logistic regression
trControl = data_ctrl                                                  # pass training control parameters.
)
lr.m1.cv$results
lda.m1.cv$results
qda.m1.cv$results
# Step1:  Set up training control
data_ctrl = trainControl(method = 'cv', number = 10, verboseIter = TRUE, metric = "Accuracy")
data_ctrl_loocv = trainControl(method = 'LOOCV', number = 10, verboseIter = TRUE)
lr.m1.cv.loocv = train(num ~ age + sex + cp + trestbps + chol + fbs + restecg + thalach + exang + oldpeak + slope + ca + thal, # model to fit
data = data.cat,                                                       # data
method = 'glm',                                                        # general linear model
family = 'binomial',                                                   # binomial for logistic regression
trControl = data_ctrl_loocv                                                  # pass training control parameters.
)
lr.m1.cv.loocv
lda.m1.cv =        train(num ~., # model to fit
data = data.cat,                                                       # data
method = 'lda',                                                        # general linear model
family = 'binomial',                                                   # binomial for logistic regression
trControl = data_ctrl_loocv                                                  # pass training control parameters.
)
lda.m1.cv.loocv =        train(num ~., # model to fit
data = data.cat,                                                       # data
method = 'lda',                                                        # general linear model
family = 'binomial',                                                   # binomial for logistic regression
trControl = data_ctrl_loocv                                                  # pass training control parameters.
)
lda.m1.cv.loocv
qda.m1.cv,loocv =        train(num ~., # model to fit
data = data.cat,                                                       # data
method = 'qda',                                                        # general linear model
family = 'binomial',                                                   # binomial for logistic regression
trControl = data_ctrl_loocv                                                  # pass training control parameters.
)
qda.m1.cv.loocv =        train(num ~., # model to fit
data = data.cat,                                                       # data
method = 'qda',                                                        # general linear model
family = 'binomial',                                                   # binomial for logistic regression
trControl = data_ctrl_loocv                                                  # pass training control parameters.
)
qda.m1.cv.loocv
# Clean Namespace
rm(list = ls())
# LOAD LIBRARIES
library(RMySQL)
# CLEAR NAMESPACE
rm(list = ls())
# LOAD LIBRARIES
library(RMySQL)
# SETUP CONNECTION TO DB
mydb <- dbConnect(RMySQL::MySQL(), user='ccirelli2',
password='Work4starr', dbname='GSU',
host = "127.0.0.1")
# Get List of Tables
dbListTables(mydb)
query1_alldata = dbSendQuery(mydb, '
SELECT
MONTH(pickup_datetime) AS "MONTH",
DAY(pickup_datetime) AS "DAY",
pickup_x,
pickup_y,
dropoff_x,
dropoff_y,
duration
FROM ML_FinProj_GothamCab_Train
WHERE duration != 0
LIMIT 1000')
result_q1 = fetch(query1_alldata, n = -1)
# Query 2:  Average Duration By Month
query2_rel_month_duration = dbSendQuery(mydb, '
SELECT
MONTH(pickup_datetime) AS "MONTH",
ROUND(AVG(duration),0) AS "AVERAGE_DURATION"
FROM GSU.ML_FinProj_GothamCab_Train
GROUP BY MONTH(pickup_datetime)
ORDER BY ROUND(AVG(duration),0);')
result_q2 = fetch(query2_rel_month_duration, n = -1)
barplot(data_q2$AVERAGE_DURATION, names.arg = data_q2$MONTH,
main = "Avg Duration By Month",
xlab = "Month",
ylab = "Duration")
barplot(data_q2$AVERAGE_DURATION, names.arg = result_q2$MONTH,
main = "Avg Duration By Month",
xlab = "Month",
ylab = "Duration")
barplot(result_q2$AVERAGE_DURATION, names.arg = result_q2$MONTH,
main = "Avg Duration By Month",
xlab = "Month",
ylab = "Duration")
# Query 3 - Relationship of Average Duration By Day of Week
query3_rel_day_duration = dbSendQuery(mydb, '
SELECT
DAY(pickup_datetime) AS "DAY",
ROUND(AVG(duration),0) AS "AVERAGE_DURATION"
FROM GSU.ML_FinProj_GothamCab_Train
GROUP BY DAY(pickup_datetime)
ORDER BY DAY(pickup_datetime);')
result_q3 = fetch(query3_rel_day_duration, n = -1)
barplot(result_q3$AVERAGE_DURATION,
names.arg = result_q3$DAY,
main = "Average Duration By Day Of Week",
xlab = "Day",
ylab = "Duration")
test_date = 2012-02-01
test_date = weekdays(as.Date(2012-02-01))
test_date = weekdays(as.Date('2012-02-01'))
test_date
test_date = weekdays(as.Date('2034-01-01'))
test_date
query4_rel_weekday_duration = dbSendQuery(mydb, '
SELECT
Weekday,
ROUND(AVG(duration),0) AS "AVERAGE_DURATION"
FROM GSU.ML_FinProj_GothamCab_Train
GROUP BY Weekday
ORDER BY DAY(pickup_datetime);')
query4_rel_weekday_duration = dbSendQuery(mydb, '
SELECT
Weekday,
ROUND(AVG(duration),0) AS "AVERAGE_DURATION"
FROM GSU.ML_FinProj_GothamCab_Train
GROUP BY Weekday
ORDER BY Weekday;')
result_q4 = fetch(query4_rel_weekday_duration, n = -1)
barplot(result_q3$AVERAGE_DURATION,
names.arg = result_q3$DAY,
main = "Average Duration By Weekday",
xlab = "Weekday",
ylab = "Duration")
barplot(result_q4$AVERAGE_DURATION,
names.arg = result_q4$Weekday,
main = "Average Duration By Weekday",
xlab = "Weekday",
ylab = "Duration")
print(result_q4.head())
print(result_q4)
boxplot(result_q4)
boxplot(result_q1$duration)
result_q1$duration
plot(result_q1$duration)
boxplot(result_q1$duration)
histogram(result_q1$duration)
hist(result_q1$duration)
density(result_q1$duration)
d = density(result_q1$duration)
plot(d)
query5_rel_route_duration = dbSendQuery(mydb, '
SELECT
pickup_x,
pickup_y,
dropoff_x,
dropoff_y,
COUNT(duration) AS "Route Count"
FROM GSU.ML_FinProj_GothamCab_Train
GROUP BY pickup_x, pickup_y, dropoff_x, dropoff_y
ORDER BY COUNT(duration) DESC'
)
# Plot Durations
plot(result_q1$duration)
boxplot(result_q1$duration)
hist(result_q1$duration)
d = density(result_q1$duration)
plot(d)
## CLEAR NAMESPACE________________________________________________________________________
rm(list = ls())
## IMPORT LIBRARIES_______________________________________________________________________
library(lattice)
library(ggplot2)
library(caret)  # used for parameter tuning
## CREATE DATASET_________________________________________________________________________
setwd('/home/ccirelli2/Desktop/Repositories/ML_Final_Project_2019/Gotham_Cabs/data')
s1.50k.nolimits        = read.csv('sample1_50k.csv')[2:12]                          #[2:12] drop datetime col.
s2.100k.nolimits       = read.csv('sample1_100k.csv')[2:12]
s3.250k.nolimits       = read.csv('sample1_250k.csv')[2:12]
s4.50k.wlimits         = read.csv('sample2_wlimits_50k.csv')[2:12]
s5.100k.wlimits        = read.csv('sample2_wlimits_100k.csv')[2:12]
s6.250k.wlimits        = read.csv('sample2_wlimits_250k.csv')[2:12]
# SET SEED FOR ENTIRE CODE________________________________________________________________
set.seed(123)
# RANDOMIZE DATA__________________________________________________________________________
s1.50k.nolimits_ran    = s1.50k.nolimits[sample(nrow(s1.50k.nolimits)),]
s2.100k.nolimits_ran   = s2.100k.nolimits[sample(nrow(s2.100k.nolimits)),]
s3.250k.nolimits_ran   = s3.250k.nolimits[sample(nrow(s3.250k.nolimits)),]
s4.50k.wlimits_ran     = s4.50k.wlimits[sample(nrow(s4.50k.wlimits)), ]
s5.100k.wlimits_ran    = s5.100k.wlimits[sample(nrow(s5.100k.wlimits)), ]
s6.250k.wlimits_ran    = s6.250k.wlimits[sample(nrow(s6.250k.wlimits)), ]
# training split
train_nrows = (nrow(s1.50k.nolimits_ran)  * .7)                          # Caculate num rows for training set.
# Train
s1.train = s1.50k.nolimits_ran[1:  (nrow(s1.50k.nolimits_ran)  * .7), ]
s2.train = s2.100k.nolimits_ran[1: (nrow(s2.100k.nolimits_ran) * .7), ]
s3.train = s3.250k.nolimits_ran[1: (nrow(s2.100k.nolimits_ran) * .7), ]
s4.train = s4.50k.wlimits_ran[1:   (nrow(s4.50k.wlimits_ran)  * .7), ]
s5.train = s5.100k.wlimits_ran[1:  (nrow(s5.100k.wlimits_ran)  * .7), ]
s6.train = s6.250k.wlimits_ran[1:  (nrow(s6.250k.wlimits_ran)  * .7), ]
## M1:   Duration vs Distance_______________________________________________________________________________________
m1.lr            = lm(duration ~ distance, data = s1.train)
m1.summary       = summary(m1.lr)
m1.summary
set.names     <- c('s1_50k', 's2_100k', 's3_250k',
's4_50k.wl', 's5_100k.wl', 's6_250k.wl')
set.names     <- c('s1_50k', 's2_100k', 's3_250k',
's4_50k.wl', 's5_100k.wl', 's6_250k.wl')
m1.rse        <- data.frame('Index' = 1)
Count          = 0
for (i in training_sets){
lr         = lm(duration ~ distance, data = i)
lr.summary = summary(lr)
rse        = sqrt(sum(lr.summary$residuals^2) / length(lr.summary$residuals))
Count = Count + 1
m1.rse[Count] <- rse
print(paste('Model =>', Count, 'completed'))
}
# GET RSE ALL DATASETS
training_sets <- list(s1.train, s2.train, s3.train, s4.train, s5.train, s6.train)
for (i in training_sets){
lr         = lm(duration ~ distance, data = i)
lr.summary = summary(lr)
rse        = sqrt(sum(lr.summary$residuals^2) / length(lr.summary$residuals))
Count = Count + 1
m1.rse[Count] <- rse
print(paste('Model =>', Count, 'completed'))
}
# Generate Graph of Resuls
m1.rse_list = c(m1.rse$Index, m1.rse$V2, m1.rse$V3, m1.rse$V4, m1.rse$V5, m1.rse$V6)
barplot(m1.rse_list, names.arg = c('s1_50k', 's2_100k', 's3_250k', 's4_50k.wl',
's5_100k.wl', 's6_250k.wl'), main = 'M1 LR - ALL DATASETS',
xlab = 'Datasets', ylab = 'RSE')
## CLEAR NAMESPACE________________________________________________________________________
rm(list = ls())
## IMPORT LIBRARIES_______________________________________________________________________
library(lattice)
library(ggplot2)
library(caret)  # used for parameter tuning
library(fastDummies)
## CREATE DATASET_________________________________________________________________________
setwd('/home/ccirelli2/Desktop/Repositories/ML_Final_Project_2019/Gotham_Cabs/data')
s1.50k.nolimits        = read.csv('sample1_50k.csv')[2:12]                          #[2:12] drop datetime col.
s2.100k.nolimits       = read.csv('sample1_100k.csv')[2:12]
s3.250k.nolimits       = read.csv('sample1_250k.csv')[2:12]
s4.50k.wlimits         = read.csv('sample2_wlimits_50k.csv')[2:12]
s5.100k.wlimits        = read.csv('sample2_wlimits_100k.csv')[2:12]
s6.250k.wlimits        = read.csv('sample2_wlimits_250k.csv')[2:12]
# SET SEED FOR ENTIRE CODE________________________________________________________________
set.seed(123)
## S1 - Factor
s1.50k.nolimits$pickup_x    <- factor(s1.50k.nolimits$pickup_x)
s1.50k.nolimits$pickup_y    <- factor(s1.50k.nolimits$pickup_y)
s1.50k.nolimits$dropoff_x   <- factor(s1.50k.nolimits$dropoff_x)
s1.50k.nolimits$dropoff_y   <- factor(s1.50k.nolimits$dropoff_y)
s1.50k.nolimits$weekday     <- factor(s1.50k.nolimits$weekday)
s1.50k.nolimits$hour_       <- factor(s1.50k.nolimits$hour_)
s1.50k.nolimits$day_        <- factor(s1.50k.nolimits$day_)
s1.50k.nolimits$month_      <- factor(s1.50k.nolimits$month_)
s1.50k.nolimits             <- dummy_cols(s1.50k.nolimits)              # Create Dummy Columns
s2.100k.nolimits$pickup_x    <- factor(s2.100k.nolimits$pickup_x)
s2.100k.nolimits$pickup_y    <- factor(s2.100k.nolimits$pickup_y)
s2.100k.nolimits$dropoff_x   <- factor(s2.100k.nolimits$dropoff_x)
s2.100k.nolimits$dropoff_y   <- factor(s2.100k.nolimits$dropoff_y)
s2.100k.nolimits$weekday     <- factor(s2.100k.nolimits$weekday)
s2.100k.nolimits$hour_       <- factor(s2.100k.nolimits$hour_)
s2.100k.nolimits$day_        <- factor(s2.100k.nolimits$day_)
s2.100k.nolimits$month_      <- factor(s2.100k.nolimits$month_)
s2.100k.nolimits             <- dummy_cols(s2.100k.nolimits)              # Create Dummy Columns
s4.50k.wlimits$pickup_x     <- factor(s4.50k.wlimits$pickup_x)
s4.50k.wlimits$pickup_y     <- factor(s4.50k.wlimits$pickup_y)
s4.50k.wlimits$dropoff_x    <- factor(s4.50k.wlimits$dropoff_x)
s4.50k.wlimits$dropoff_y    <- factor(s4.50k.wlimits$dropoff_y)
s4.50k.wlimits$weekday      <- factor(s4.50k.wlimits$weekday)
s4.50k.wlimits$hour_        <- factor(s4.50k.wlimits$hour_)
s4.50k.wlimits$day_         <- factor(s4.50k.wlimits$day_)
s4.50k.wlimits$month_       <- factor(s4.50k.wlimits$month_)
s4.50k.wlimits              <- dummy_cols(s4.50k.wlimits)               # Create Dummy Columns
s5.100k.wlimits$pickup_x    <- factor(s5.100k.wlimits$pickup_x)
s5.100k.wlimits$pickup_y    <- factor(s5.100k.wlimits$pickup_y)
s5.100k.wlimits$dropoff_x   <- factor(s5.100k.wlimits$dropoff_x)
s5.100k.wlimits$dropoff_y   <- factor(s5.100k.wlimits$dropoff_y)
s5.100k.wlimits$weekday     <- factor(s5.100k.wlimits$weekday)
s5.100k.wlimits$hour_       <- factor(s5.100k.wlimits$hour_)
s5.100k.wlimits$day_        <- factor(s5.100k.wlimits$day_)
s5.100k.wlimits$month_      <- factor(s5.100k.wlimits$month_)
s5.100k.wlimits             <- dummy_cols(s5.100k.wlimits)              # Create Dummy Columns
train_nrows_50k  = (nrow(s1.50k.nolimits_3)  * .7)
train_nrows_100k = (nrow(s2.100k.nolimits)   * .7)
train_nrows_50k  = (nrow(s1.50k.nolimits)  * .7)
train_nrows_100k = (nrow(s2.100k.nolimits)   * .7)
train_nrows_250k = (nrow(s3.250k.nolimits)   * .7)
# Train
s1.train = s1.50k.nolimits[ 1:   (nrow(s1.50k.nolimits)  * .7), ]
s2.train = s2.100k.nolimits[1:   (nrow(s2.100k.nolimits)  * .7), ]
s4.train = s4.50k.wlimits[  1:   (nrow(s4.50k.wlimits)  * .7), ]
s5.train = s5.100k.wlimits[ 1:   (nrow(s5.100k.wlimits)  * .7), ]
train_nrows_50k  = (nrow(s1.50k.nolimits)  * .7)
train_nrows_100k = (nrow(s2.100k.nolimits)   * .7)
train_nrows_250k = (nrow(s3.250k.nolimits)   * .7)
# Test
s1.test = s1.50k.nolimits[  train_nrows_50k:  length(s1.50k.nolimits), ]
s4.test = s4.50k.wlimits[   train_nrows_50k:  length(s4.50k.wlimits),  ]
# Train
s1.train = s1.50k.nolimits[ 1:   (nrow(s1.50k.nolimits)  * .7), ]
s2.train = s2.100k.nolimits[1:   (nrow(s2.100k.nolimits)  * .7), ]
s4.train = s4.50k.wlimits[  1:   (nrow(s4.50k.wlimits)  * .7), ]
s5.train = s5.100k.wlimits[ 1:   (nrow(s5.100k.wlimits)  * .7), ]
# Test
s1.test = s1.50k.nolimits[  train_nrows_50k:  length(s1.50k.nolimits), ]
s4.test = s4.50k.wlimits[   train_nrows_50k:  length(s4.50k.wlimits),  ]
# Train Model
m3.mlr = lm(duration ~ ., data = s1.train)
m3.summary = summary(m3.mlr)                                            # return summary
m3.summary
print('hello world')
num_poly     = c(1,2,3,4)
d1_rse_train = c(280, 196, 149, 113)
d1_rse_test  = c(737, 766, 801, 3438)
d2_rse_train = c(246, 153, 106, 81)
d2_rse_test  = c(247, 156, 262, 706)
d3_rse_test  = c(733, 781, 19394, 1779816)
result_matrix = matrix(num_poly, d1_rse_train, d2_rse_train)
result_matrix
result_matrix = matrix(c(num_poly, d1_rse_train, d2_rse_train))
result_matrix
result_matrix = data.frame(num_poly, d1_rse_train, d2_rse_train))
result_matrix = data.frame(num_poly, d1_rse_train, d2_rse_train)
result_matrix
barplot(result_matrix)
barplot(result_matrix, height = 1)
plot(result_matrix)
result_matrix = data.frame(index = num_poly, d1_rse_train, d2_rse_train)
plot(result_matrix)
barplot(result_matrix)
?barplot
barplot(c(d1_rse_train, d2_rse_train), names.arg = 'dataset1', 'dataset2')
barplot(d1_rse_train, d2_rse_train, names.arg = 'dataset1', 'dataset2')
barplot(d1_rse_train, names.arg = 'dataset1')
barplot(d1_rse_train, names.arg = 'p1', 'p2', 'p3', 'p4')
barplot(d1_rse_train, names.arg = 'p1', 'p2', 'p3', 'p4')
barplot(d1_rse_train, names.arg = c('p1', 'p2', 'p3', 'p4'))
d1_rse_train = list(280, 196, 149, 113)
barplot(d1_rse_train, names.arg = c('p1', 'p2', 'p3', 'p4'))
d1_rse_train = list(280, 196, 149, 113)
barplot(d1_rse_train, names.arg = c('p1', 'p2', 'p3', 'p4'))
d1_rse_train = c(280, 196, 149, 113)
barplot(d1_rse_train, names.arg = c('p1', 'p2', 'p3', 'p4'))
barplot(matrix(d1_rse_train, d2_rse_train), names.arg = c('p1', 'p2', 'p3', 'p4'))
barplot(d1_rse_train, names.arg = c('p1', 'p2', 'p3', 'p4'))
d2_train = barplot(d2_rse_train, names.arg = c('p1', 'p2', 'p3', 'p4'))
test = table(d1_train, d2_rse_train)
num_poly     = c(1,2,3,4)
d1_rse_train = c(280, 196, 149, 113)
d1_rse_test  = c(737, 766, 801, 3438)
d2_rse_train = c(246, 153, 106, 81)
d2_rse_test  = c(247, 156, 262, 706)
d3_rse_test  = c(733, 781, 19394, 1779816)
test = table(d1_train, d2_rse_train)
test = table(d1_rse_train, d2_rse_train)
test
class(s1.50k.nolimits$duration)
test1 = list(1,2,3)
test2 = list(4,5,6)
table(test1, test2)
test1 = list(1,2,3)
test2 = list(4,5,6)
table(test1, test2)
test1 = c(1,2,3)
test2 = c(4,5,6)
table(test1, test2)
matrix(test1, test2)
test1 = c(1,2,3)
test2 = c(4,5,6)
matrix(test1, test2)
test1 = vector(1,2,3)
test1 = vector(1,2,3)
test2 = vector(4,5,6)
result_matrix
test = result_matrix$d1_rse_train, result_matrix$d2_rse_train)
test = table(result_matrix$d1_rse_train, result_matrix$d2_rse_train)
test
smoke <- matrix(c(280, 196, 149, 113, 246, 153, 106, 81), ncol=2, byrow = FALSE)
colnames(smoke) = c('d1_train', 'd2_train')
smoke
d1_plot = barplot(smoke, beside = TRUE)
d1_plot = barplot(smoke, beside = FALSE)
d1_plot = barplot(smoke)
smoke <- matrix(c(280, 196, 149, 113, 246, 153, 106, 81), ncol=2, byrow = TRUE)
colnames(smoke) = c('d1_train', 'd2_train')
d1_plot = barplot(smoke, besides = T)
d1_plot = barplot(smoke, besides = F)
smoke <- matrix(c(280, 196, 149, 113, 246, 153, 106, 81), ncol=2, byrow = TRUE)
colnames(smoke) = c('d1_train', 'd2_train')
d1_plot = barplot(smoke, besides = F)
d1_plot = barplot(smoke, beside = F)
d1_plot = barplot(smoke, beside = F)
d1_plot = barplot(smoke, beside = T)
d1_plot = barplot(smoke, beside = T, xlab = c('p1', 'p2', 'p3', 'p4'))
d1_plot = barplot(smoke, beside = T, col = c('p1', 'p2', 'p3', 'p4'))
d1_plot = barplot(smoke, beside = T, legedn = rownames(c('p1', 'p2', 'p3', 'p4')))
d1_plot = barplot(smoke, beside = T, legedn = rownames(c(smoke)))
d1_plot = barplot(smoke, beside = T, legend.text = rownames(c(smoke)))
training_results <- matrix(c(280, 196, 149, 113, 246, 153, 106, 81), ncol=2, byrow = TRUE)
rownames(training_results) = c('p1', 'p2', 'p3', 'p4')
training_results
d1_plot = barplot(smoke, beside = T)
d1_plot = barplot(smoke, beside = T)
rownames
rownames(training_results)
d1_plot = barplot(smoke, beside = T, logend = rownames(training_results))
d1_plot = barplot(smoke, beside = T, legend = rownames(training_results))
d1_plot = barplot(smoke, beside = T, legend = rownames(training_results),
main = 'MLR RESULTS - POLYNOMIALS 1-4',
ylab = 'TRAIN - RSE',
xlab = 'DATASETS')
d1_plot = barplot(smoke, beside = T, legend = rownames(training_results), grid = T,
main = 'MLR RESULTS - POLYNOMIALS 1-4',
ylab = 'TRAIN - RSE',
xlab = 'DATASETS')
d1_plot = barplot(smoke, beside = T, legend = rownames(training_results), panel.first = grid(),
main = 'MLR RESULTS - POLYNOMIALS 1-4',
ylab = 'TRAIN - RSE',
xlab = 'DATASETS')
training_results <- matrix(c(280, 196, 149, 113, 737, 766, 801, 3438), ncol=2, byrow = TRUE)
colnames(training_results) = c('d1_train', 'd2_test')
rownames(training_results) = c('p1', 'p2', 'p3', 'p4')
d1_plot = barplot(smoke, beside = T, legend = rownames(training_results),
main = 'MLR RESULTS - POLYNOMIALS 1-4',
ylab = 'TRAIN - RSE',
xlab = 'DATASETS')
## CLEAR NAMESPACE________________________________________________________________________
rm(list = ls())
## IMPORT LIBRARIES_______________________________________________________________________
library(lattice)
library(ggplot2)
library(caret)  # used for parameter tuning
(1,2,3,4)
num_poly     = c(1,2,3,4)
d1_rse_train = c(280, 196, 149, 113)
d1_rse_test  = c(737, 766, 801, 3438)
d2_rse_train = c(246, 153, 106, 81)
d2_rse_test  = c(247, 156, 262, 706)
d3_rse_test  = c(733, 781, 19394, 1779816)
training_results <- matrix(c(280, 196, 149, 113, 737, 766, 801, 3438), ncol=2, byrow = TRUE)
colnames(training_results) = c('d1_train', 'd2_test')
rownames(training_results) = c('p1', 'p2', 'p3', 'p4')
d1_plot = barplot(smoke, beside = T, legend = rownames(training_results),
main = 'MLR RESULTS - POLYNOMIALS 1-4',
ylab = 'TRAIN - RSE',
xlab = 'DATASETS')
d1_plot = barplot(training_results, beside = T, legend = rownames(training_results),
main = 'MLR RESULTS - POLYNOMIALS 1-4',
ylab = 'TRAIN - RSE',
xlab = 'DATASETS')
# Dataset 1
d1_results <- matrix(c(280, 196, 149, 113, 737, 766, 801, 3438), ncol=2, byrow = TRUE)
colnames(d1_results) = c('d1_train', 'd2_test')
rownames(d1_results) = c('p1', 'p2', 'p3', 'p4')
d1_plot = barplot(d1_results, beside = T, legend = rownames(training_results), panel.first = grid(),
main = 'MLR RESULTS - POLYNOMIALS 1-4',
ylab = 'TRAIN - RSE',
xlab = 'DATASETS')
d1_plot = barplot(d1_results, beside = T, legend = rownames(training_results), panel.first = grid(),
main = 'MLR RESULTS - POLYNOMIALS 1-4',
ylab = 'TRAIN - RSE',
xlab = 'DATASETS')
# Dataset 1
d1_results <- matrix(c(280, 196, 149, 113, 737, 766, 801, 3438), ncol=2, byrow = TRUE)
colnames(d1_results) = c('d1_train', 'd1_test')
rownames(d1_results) = c('p1', 'p2', 'p3', 'p4')
d1_plot = barplot(d1_results, beside = T, legend = rownames(training_results), panel.first = grid(),
main = 'MLR RESULTS - POLYNOMIALS 1-4',
ylab = 'TRAIN - RSE',
xlab = 'DATASETS')
# Dataset 2
d2_results <- matrix(246, 153, 106, 81, 733, 781, 19394, 1779816, ncol = 2, byrow = TRUE)
# Dataset 2
d2_results <- matrix(246, 153, 106, 81, 733, 781, 19394, 1779816), ncol = 2, byrow = TRUE)
# Dataset 2
d2_results <- matrix(c(246, 153, 106, 81, 733, 781, 19394, 1779816), ncol = 2, byrow = TRUE)
colnames(d2_results) = c('d2_train', 'd2_test')
rownames(d2_results) = c('p1', 'p2', 'p3', 'p4')
d2_plot = barplot(d2_results, beside = T, legend = rownames(d2_results), panel.first = grid(),
main = 'MLR RESULTS - POLYNOMIALS 1-4',
ylab = 'TRAIN - RSE',
xlab = 'DATASETS')
# Dataset 2
d2_results <- matrix(c(246, 153, 106, 733, 781, 19394), ncol = 2, byrow = TRUE)
colnames(d2_results) = c('d2_train', 'd2_test')
rownames(d2_results) = c('p1', 'p2', 'p3', 'p4')
rownames(d2_results) = c('p1', 'p2', 'p3')
d2_plot = barplot(d2_results, beside = T, legend = rownames(d2_results), panel.first = grid(),
main = 'MLR RESULTS - POLYNOMIALS 1-4',
ylab = 'TRAIN - RSE',
xlab = 'DATASETS')
# Dataset 2
d2_results <- matrix(c(246, 153, 106, 81, 733, 781, 1000), ncol = 2, byrow = TRUE)
# Dataset 2
d2_results <- matrix(c(246, 153, 106, 81, 733, 781, 1000, 1500), ncol = 2, byrow = TRUE)
colnames(d2_results) = c('d2_train', 'd2_test')
rownames(d2_results) = c('p1', 'p2', 'p3', 'p4')
d2_plot = barplot(d2_results, beside = T, legend = rownames(d2_results), panel.first = grid(),
main = 'MLR RESULTS - POLYNOMIALS 1-4',
ylab = 'TRAIN - RSE',
xlab = 'DATASETS')
# Dataset 2
d2_results <- matrix(c(246, 153, 106, 81, 733, 781, 1500, 2000), ncol = 2, byrow = TRUE)
colnames(d2_results) = c('d2_train', 'd2_test')
rownames(d2_results) = c('p1', 'p2', 'p3', 'p4')
d2_plot = barplot(d2_results, beside = T, legend = rownames(d2_results), panel.first = grid(),
main = 'MLR RESULTS - POLYNOMIALS 1-4',
ylab = 'TRAIN - RSE',
xlab = 'DATASETS')
