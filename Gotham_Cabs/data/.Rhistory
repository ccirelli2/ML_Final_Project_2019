lda.m1.cv$resample$Accuracy
# Step5:  Examine Model Predictions (R2) For Each Fold
lr.m1.cv$Resample
# Step5:  Examine Model Predictions (R2) For Each Fold
lr.m1.cv$results
lda.m1.cv$results
lqa.m1.cv =        train(num ~., # model to fit
data = data.cat,                                                       # data
method = 'qda',                                                        # general linear model
family = 'binomial',                                                   # binomial for logistic regression
trControl = data_ctrl                                                  # pass training control parameters.
)
qda.m1.cv =        train(num ~., # model to fit
data = data.cat,                                                       # data
method = 'qda',                                                        # general linear model
family = 'binomial',                                                   # binomial for logistic regression
trControl = data_ctrl                                                  # pass training control parameters.
)
lr.m1.cv$results
lda.m1.cv$results
qda.m1.cv$results
# Step1:  Set up training control
data_ctrl = trainControl(method = 'cv', number = 10, verboseIter = TRUE, metric = "Accuracy")
data_ctrl_loocv = trainControl(method = 'LOOCV', number = 10, verboseIter = TRUE)
lr.m1.cv.loocv = train(num ~ age + sex + cp + trestbps + chol + fbs + restecg + thalach + exang + oldpeak + slope + ca + thal, # model to fit
data = data.cat,                                                       # data
method = 'glm',                                                        # general linear model
family = 'binomial',                                                   # binomial for logistic regression
trControl = data_ctrl_loocv                                                  # pass training control parameters.
)
lr.m1.cv.loocv
lda.m1.cv =        train(num ~., # model to fit
data = data.cat,                                                       # data
method = 'lda',                                                        # general linear model
family = 'binomial',                                                   # binomial for logistic regression
trControl = data_ctrl_loocv                                                  # pass training control parameters.
)
lda.m1.cv.loocv =        train(num ~., # model to fit
data = data.cat,                                                       # data
method = 'lda',                                                        # general linear model
family = 'binomial',                                                   # binomial for logistic regression
trControl = data_ctrl_loocv                                                  # pass training control parameters.
)
lda.m1.cv.loocv
qda.m1.cv,loocv =        train(num ~., # model to fit
data = data.cat,                                                       # data
method = 'qda',                                                        # general linear model
family = 'binomial',                                                   # binomial for logistic regression
trControl = data_ctrl_loocv                                                  # pass training control parameters.
)
qda.m1.cv.loocv =        train(num ~., # model to fit
data = data.cat,                                                       # data
method = 'qda',                                                        # general linear model
family = 'binomial',                                                   # binomial for logistic regression
trControl = data_ctrl_loocv                                                  # pass training control parameters.
)
qda.m1.cv.loocv
# Clean Namespace
rm(list = ls())
# LOAD LIBRARIES
library(RMySQL)
# CLEAR NAMESPACE
rm(list = ls())
# LOAD LIBRARIES
library(RMySQL)
# SETUP CONNECTION TO DB
mydb <- dbConnect(RMySQL::MySQL(), user='ccirelli2',
password='Work4starr', dbname='GSU',
host = "127.0.0.1")
# Get List of Tables
dbListTables(mydb)
query1_alldata = dbSendQuery(mydb, '
SELECT
MONTH(pickup_datetime) AS "MONTH",
DAY(pickup_datetime) AS "DAY",
pickup_x,
pickup_y,
dropoff_x,
dropoff_y,
duration
FROM ML_FinProj_GothamCab_Train
WHERE duration != 0
LIMIT 1000')
result_q1 = fetch(query1_alldata, n = -1)
# Query 2:  Average Duration By Month
query2_rel_month_duration = dbSendQuery(mydb, '
SELECT
MONTH(pickup_datetime) AS "MONTH",
ROUND(AVG(duration),0) AS "AVERAGE_DURATION"
FROM GSU.ML_FinProj_GothamCab_Train
GROUP BY MONTH(pickup_datetime)
ORDER BY ROUND(AVG(duration),0);')
result_q2 = fetch(query2_rel_month_duration, n = -1)
barplot(data_q2$AVERAGE_DURATION, names.arg = data_q2$MONTH,
main = "Avg Duration By Month",
xlab = "Month",
ylab = "Duration")
barplot(data_q2$AVERAGE_DURATION, names.arg = result_q2$MONTH,
main = "Avg Duration By Month",
xlab = "Month",
ylab = "Duration")
barplot(result_q2$AVERAGE_DURATION, names.arg = result_q2$MONTH,
main = "Avg Duration By Month",
xlab = "Month",
ylab = "Duration")
# Query 3 - Relationship of Average Duration By Day of Week
query3_rel_day_duration = dbSendQuery(mydb, '
SELECT
DAY(pickup_datetime) AS "DAY",
ROUND(AVG(duration),0) AS "AVERAGE_DURATION"
FROM GSU.ML_FinProj_GothamCab_Train
GROUP BY DAY(pickup_datetime)
ORDER BY DAY(pickup_datetime);')
result_q3 = fetch(query3_rel_day_duration, n = -1)
barplot(result_q3$AVERAGE_DURATION,
names.arg = result_q3$DAY,
main = "Average Duration By Day Of Week",
xlab = "Day",
ylab = "Duration")
test_date = 2012-02-01
test_date = weekdays(as.Date(2012-02-01))
test_date = weekdays(as.Date('2012-02-01'))
test_date
test_date = weekdays(as.Date('2034-01-01'))
test_date
query4_rel_weekday_duration = dbSendQuery(mydb, '
SELECT
Weekday,
ROUND(AVG(duration),0) AS "AVERAGE_DURATION"
FROM GSU.ML_FinProj_GothamCab_Train
GROUP BY Weekday
ORDER BY DAY(pickup_datetime);')
query4_rel_weekday_duration = dbSendQuery(mydb, '
SELECT
Weekday,
ROUND(AVG(duration),0) AS "AVERAGE_DURATION"
FROM GSU.ML_FinProj_GothamCab_Train
GROUP BY Weekday
ORDER BY Weekday;')
result_q4 = fetch(query4_rel_weekday_duration, n = -1)
barplot(result_q3$AVERAGE_DURATION,
names.arg = result_q3$DAY,
main = "Average Duration By Weekday",
xlab = "Weekday",
ylab = "Duration")
barplot(result_q4$AVERAGE_DURATION,
names.arg = result_q4$Weekday,
main = "Average Duration By Weekday",
xlab = "Weekday",
ylab = "Duration")
print(result_q4.head())
print(result_q4)
boxplot(result_q4)
boxplot(result_q1$duration)
result_q1$duration
plot(result_q1$duration)
boxplot(result_q1$duration)
histogram(result_q1$duration)
hist(result_q1$duration)
density(result_q1$duration)
d = density(result_q1$duration)
plot(d)
query5_rel_route_duration = dbSendQuery(mydb, '
SELECT
pickup_x,
pickup_y,
dropoff_x,
dropoff_y,
COUNT(duration) AS "Route Count"
FROM GSU.ML_FinProj_GothamCab_Train
GROUP BY pickup_x, pickup_y, dropoff_x, dropoff_y
ORDER BY COUNT(duration) DESC'
)
# Plot Durations
plot(result_q1$duration)
boxplot(result_q1$duration)
hist(result_q1$duration)
d = density(result_q1$duration)
plot(d)
## CLEAR NAMESPACE________________________________________________________________________
rm(list = ls())
## IMPORT LIBRARIES_______________________________________________________________________
library(rpart)
library(rpart.plot)
library(tree)
library(ggplot2)
## CREATE DATASET_________________________________________________________________________
setwd('/home/ccirelli2/Desktop/Repositories/ML_Final_Project_2019/Gotham_Cabs/data')
s1.50k.nolimits        = read.csv('sample1_50k.csv')[2:12]                          #[2:12] drop datetime col.
s2.100k.nolimits       = read.csv('sample1_100k.csv')[2:12]
s3.250k.nolimits       = read.csv('sample1_250k.csv')[2:12]
s4.50k.wlimits         = read.csv('sample2_wlimits_50k.csv')[2:12]
s5.100k.wlimits        = read.csv('sample2_wlimits_100k.csv')[2:12]
s6.250k.wlimits        = read.csv('sample2_wlimits_250k.csv')[2:12]
# RANDOMIZE DATA__________________________________________________________________________
s1.50k.nolimits_ran    = s1.50k.nolimits[sample(nrow(s1.50k.nolimits)),]
s2.100k.nolimits_ran   = s2.100k.nolimits[sample(nrow(s2.100k.nolimits)),]
s3.250k.nolimits_ran   = s3.250k.nolimits[sample(nrow(s3.250k.nolimits)),]
s4.50k.wlimits_ran     = s4.50k.wlimits[sample(nrow(s4.50k.wlimits)), ]
s5.100k.wlimits_ran    = s5.100k.wlimits[sample(nrow(s5.100k.wlimits)), ]
s6.250k.wlimits_ran    = s6.250k.wlimits[sample(nrow(s6.250k.wlimits)), ]
# TRAIN / TEST SPLIT______________________________________________________________________
# Calculate Number of Training Observations
train_nrows_50k  = (nrow(s1.50k.nolimits)  * .7)
train_nrows_100k = (nrow(s2.100k.nolimits)   * .7)
train_nrows_250k = (nrow(s3.250k.nolimits)   * .7)
# Train
s1.train = s1.50k.nolimits_ran[1:   train_nrows_50k, ]
s2.train = s2.100k.nolimits_ran[1:  train_nrows_100k, ]
s3.train = s3.250k.nolimits_ran[1:  train_nrows_250k, ]
s4.train = s4.50k.wlimits_ran[1:    train_nrows_50k, ]
s5.train = s5.100k.wlimits_ran[1:   train_nrows_100k, ]
s6.train = s6.250k.wlimits_ran[1:   train_nrows_250k, ]
# Test
s1.test = s1.50k.nolimits_ran[train_nrows_50k:    nrow(s1.50k.nolimits_ran), ] # Index from training to total
s2.test = s2.100k.nolimits_ran[train_nrows_100k:  nrow(s2.100k.nolimits_ran), ]
s3.test = s3.250k.nolimits_ran[train_nrows_250k:  nrow(s3.250k.nolimits_ran), ]
s4.test = s4.50k.wlimits_ran[train_nrows_50k:     nrow(s4.50k.wlimits_ran), ]
s5.test = s5.100k.wlimits_ran[train_nrows_100k:   nrow(s5.100k.wlimits_ran), ]
s6.test = s6.250k.wlimits_ran[train_nrows_250k:   nrow(s6.250k.wlimits_ran), ]
query1_alldata = dbSendQuery(mydb, '
SELECT
*
FROM ML_FinProj_GothamCab_Train
WHERE duration != 0
LIMIT 50000
ORDER BY RAND()')
result_q1 = fetch(query1_alldata, n = -1)
## CLEAR NAMESPACE________________________________________________________________________
rm(list = ls())
## IMPORT LIBRARIES_______________________________________________________________________
library(rpart)
library(rpart.plot)
library(tree)
library(ggplot2)
# LOAD LIBRARIES
library(RMySQL)
# INSTANTIATE CONNECTION TO DB
mydb <- dbConnect(RMySQL::MySQL(), user='ccirelli2',
password='Work4starr', dbname='GSU',
host = "127.0.0.1")
## CREATE DATASET_________________________________________________________________________
setwd('/home/ccirelli2/Desktop/Repositories/ML_Final_Project_2019/Gotham_Cabs/data')
s1.50k.nolimits        = read.csv('sample1_50k.csv')[2:12]                          #[2:12] drop datetime col.
s2.100k.nolimits       = read.csv('sample1_100k.csv')[2:12]
s3.250k.nolimits       = read.csv('sample1_250k.csv')[2:12]
s4.50k.wlimits         = read.csv('sample2_wlimits_50k.csv')[2:12]
s5.100k.wlimits        = read.csv('sample2_wlimits_100k.csv')[2:12]
s6.250k.wlimits        = read.csv('sample2_wlimits_250k.csv')[2:12]
# RANDOMIZE DATA__________________________________________________________________________
s1.50k.nolimits_ran    = s1.50k.nolimits[sample(nrow(s1.50k.nolimits)),]
s2.100k.nolimits_ran   = s2.100k.nolimits[sample(nrow(s2.100k.nolimits)),]
s3.250k.nolimits_ran   = s3.250k.nolimits[sample(nrow(s3.250k.nolimits)),]
s4.50k.wlimits_ran     = s4.50k.wlimits[sample(nrow(s4.50k.wlimits)), ]
s5.100k.wlimits_ran    = s5.100k.wlimits[sample(nrow(s5.100k.wlimits)), ]
s6.250k.wlimits_ran    = s6.250k.wlimits[sample(nrow(s6.250k.wlimits)), ]
# CRATE UNIQUE RANDOM SAMPLE DIRECTLY FROM DB_____________________________________________
# Query 1:  All Data
query1_alldata = dbSendQuery(mydb, '
SELECT
*
FROM ML_FinProj_GothamCab_Train
WHERE duration != 0
LIMIT 50000
ORDER BY RAND()')
result_q1 = fetch(query1_alldata, n = -1)
head(result_q1)
query1_alldata = dbSendQuery(mydb, '
SELECT
*
FROM ML_FinProj_GothamCab_Train
WHERE duration != 0
ORDER BY RAND()
LIMIT 50000
')
result_q1 = fetch(query1_alldata, n = -1)
d1_random_sample = fetch(query1_alldata, n = -1)
head(d1_random_sample)
query1_alldata = dbSendQuery(mydb, 'SELECT
*
FROM GSU.ML_FinProj_GothamCab_Train
WHERE speed IS NOT NULL
AND duration != 0
AND duration < 5000
AND speed < 1000
ORDER BY RAND()
LIMIT 10000;')
d1_random_sample = fetch(query1_alldata, n = -1)
d1_random_sample
data.random_sample = fetch(query1_alldata, n = -1)
s7.random.sample = data.random_sample[,2:11]
head(s7.random.sample)
s7.random.sample
data.random_sample
query1_alldata = dbSendQuery(mydb, 'SELECT
*
FROM GSU.ML_FinProj_GothamCab_Train
WHERE speed IS NOT NULL
AND duration != 0
AND duration < 5000
AND speed < 1000
ORDER BY RAND()
LIMIT 10000;')
data.random_sample = fetch(query1_alldata, n = -1)
data.random_sample
data.random_sample[,2:11]
head(data.random_sample[,2:11])
head(data.random_sample[,2:12])
data.random.sample = fetch(query1_alldata, n = -1)
s7.random.sample = head(data.random_sample[,2:12])
## CLEAR NAMESPACE________________________________________________________________________
rm(list = ls())
## IMPORT LIBRARIES_______________________________________________________________________
library(rpart)
library(rpart.plot)
library(tree)
library(ggplot2)
# LOAD LIBRARIES
library(RMySQL)
# INSTANTIATE CONNECTION TO DB
mydb <- dbConnect(RMySQL::MySQL(), user='ccirelli2',
password='Work4starr', dbname='GSU',
host = "127.0.0.1")
## CREATE DATASET_________________________________________________________________________
setwd('/home/ccirelli2/Desktop/Repositories/ML_Final_Project_2019/Gotham_Cabs/data')
s1.50k.nolimits        = read.csv('sample1_50k.csv')[2:12]                          #[2:12] drop datetime col.
s2.100k.nolimits       = read.csv('sample1_100k.csv')[2:12]
s3.250k.nolimits       = read.csv('sample1_250k.csv')[2:12]
s4.50k.wlimits         = read.csv('sample2_wlimits_50k.csv')[2:12]
s5.100k.wlimits        = read.csv('sample2_wlimits_100k.csv')[2:12]
s6.250k.wlimits        = read.csv('sample2_wlimits_250k.csv')[2:12]
# RANDOMIZE DATA__________________________________________________________________________
s1.50k.nolimits_ran    = s1.50k.nolimits[sample(nrow(s1.50k.nolimits)),]
s2.100k.nolimits_ran   = s2.100k.nolimits[sample(nrow(s2.100k.nolimits)),]
s3.250k.nolimits_ran   = s3.250k.nolimits[sample(nrow(s3.250k.nolimits)),]
s4.50k.wlimits_ran     = s4.50k.wlimits[sample(nrow(s4.50k.wlimits)), ]
s5.100k.wlimits_ran    = s5.100k.wlimits[sample(nrow(s5.100k.wlimits)), ]
s6.250k.wlimits_ran    = s6.250k.wlimits[sample(nrow(s6.250k.wlimits)), ]
# TRAIN / TEST SPLIT______________________________________________________________________
# Calculate Number of Training Observations
train_nrows_50k  = (nrow(s1.50k.nolimits)  * .7)
train_nrows_100k = (nrow(s2.100k.nolimits)   * .7)
train_nrows_250k = (nrow(s3.250k.nolimits)   * .7)
# Train
s1.train = s1.50k.nolimits_ran[1:   train_nrows_50k, ]
s2.train = s2.100k.nolimits_ran[1:  train_nrows_100k, ]
s3.train = s3.250k.nolimits_ran[1:  train_nrows_250k, ]
s4.train = s4.50k.wlimits_ran[1:    train_nrows_50k, ]
s5.train = s5.100k.wlimits_ran[1:   train_nrows_100k, ]
s6.train = s6.250k.wlimits_ran[1:   train_nrows_250k, ]
# Test
s1.test = s1.50k.nolimits_ran[train_nrows_50k:    nrow(s1.50k.nolimits_ran), ] # Index from training to total
s2.test = s2.100k.nolimits_ran[train_nrows_100k:  nrow(s2.100k.nolimits_ran), ]
s3.test = s3.250k.nolimits_ran[train_nrows_250k:  nrow(s3.250k.nolimits_ran), ]
s4.test = s4.50k.wlimits_ran[train_nrows_50k:     nrow(s4.50k.wlimits_ran), ]
s5.test = s5.100k.wlimits_ran[train_nrows_100k:   nrow(s5.100k.wlimits_ran), ]
s6.test = s6.250k.wlimits_ran[train_nrows_250k:   nrow(s6.250k.wlimits_ran), ]
# CRATE UNIQUE RANDOM SAMPLE DIRECTLY FROM DB_____________________________________________
# Query 1:  All Data
query1_alldata = dbSendQuery(mydb, 'SELECT
*
FROM GSU.ML_FinProj_GothamCab_Train
WHERE speed IS NOT NULL
AND duration != 0
AND duration < 5000
AND speed < 1000
ORDER BY RAND()
LIMIT 10000;')
data.random.sample = fetch(query1_alldata, n = -1)
s7.random.sample = head(data.random_sample[,2:12])
s7.random.sample = data.random_sample[,2:12]
data.random.sample = fetch(query1_alldata, n = -1)
s7.random.sample = data.random.sample[,2:12]
s7.random.sample
data.random.sample = fetch(query1_alldata, n = -1)
# Query 1:  All Data
query1_alldata = dbSendQuery(mydb, 'SELECT
*
FROM GSU.ML_FinProj_GothamCab_Train
WHERE speed IS NOT NULL
AND duration != 0
AND duration < 5000
AND speed < 1000
ORDER BY RAND()
LIMIT 10000;')
data.random.sample = fetch(query1_alldata, n = -1)
s7.random.sample = data.random.sample[,2:12]
s7.random.sample
# Create Lists to capture output values
index.rse = c()
list.train.rse = c()
list.test.rse  = c()
index_count = 1
# For loop over seq of cp values
for (i in seq(0.2, 0.001, -.0025)):
print(i)
for (i in seq(0.2, 0.001, -.0025)){
print(i)
}
# Create Lists to capture output values
iter.index = c()
m0.prediction = predict(m0.train, s6.test)
list.test.ran.data.rse = c()
## CLEAR NAMESPACE________________________________________________________________________
rm(list = ls())
## IMPORT LIBRARIES_______________________________________________________________________
library(rpart)
library(rpart.plot)
library(tree)
library(ggplot2)
# LOAD LIBRARIES
library(RMySQL)
# INSTANTIATE CONNECTION TO DB
mydb <- dbConnect(RMySQL::MySQL(), user='ccirelli2',
password='Work4starr', dbname='GSU',
host = "127.0.0.1")
## CREATE DATASET_________________________________________________________________________
setwd('/home/ccirelli2/Desktop/Repositories/ML_Final_Project_2019/Gotham_Cabs/data')
s1.50k.nolimits        = read.csv('sample1_50k.csv')[2:12]                          #[2:12] drop datetime col.
s2.100k.nolimits       = read.csv('sample1_100k.csv')[2:12]
s3.250k.nolimits       = read.csv('sample1_250k.csv')[2:12]
s4.50k.wlimits         = read.csv('sample2_wlimits_50k.csv')[2:12]
s5.100k.wlimits        = read.csv('sample2_wlimits_100k.csv')[2:12]
s6.250k.wlimits        = read.csv('sample2_wlimits_250k.csv')[2:12]
# RANDOMIZE DATA__________________________________________________________________________
s1.50k.nolimits_ran    = s1.50k.nolimits[sample(nrow(s1.50k.nolimits)),]
s2.100k.nolimits_ran   = s2.100k.nolimits[sample(nrow(s2.100k.nolimits)),]
s3.250k.nolimits_ran   = s3.250k.nolimits[sample(nrow(s3.250k.nolimits)),]
s4.50k.wlimits_ran     = s4.50k.wlimits[sample(nrow(s4.50k.wlimits)), ]
s5.100k.wlimits_ran    = s5.100k.wlimits[sample(nrow(s5.100k.wlimits)), ]
s6.250k.wlimits_ran    = s6.250k.wlimits[sample(nrow(s6.250k.wlimits)), ]
# TRAIN / TEST SPLIT______________________________________________________________________
# Calculate Number of Training Observations
train_nrows_50k  = (nrow(s1.50k.nolimits)  * .7)
train_nrows_100k = (nrow(s2.100k.nolimits)   * .7)
train_nrows_250k = (nrow(s3.250k.nolimits)   * .7)
# Train
s1.train = s1.50k.nolimits_ran[1:   train_nrows_50k, ]
s2.train = s2.100k.nolimits_ran[1:  train_nrows_100k, ]
s3.train = s3.250k.nolimits_ran[1:  train_nrows_250k, ]
s4.train = s4.50k.wlimits_ran[1:    train_nrows_50k, ]
s5.train = s5.100k.wlimits_ran[1:   train_nrows_100k, ]
s6.train = s6.250k.wlimits_ran[1:   train_nrows_250k, ]
# Test
s1.test = s1.50k.nolimits_ran[train_nrows_50k:    nrow(s1.50k.nolimits_ran), ] # Index from training to total
s2.test = s2.100k.nolimits_ran[train_nrows_100k:  nrow(s2.100k.nolimits_ran), ]
s3.test = s3.250k.nolimits_ran[train_nrows_250k:  nrow(s3.250k.nolimits_ran), ]
s4.test = s4.50k.wlimits_ran[train_nrows_50k:     nrow(s4.50k.wlimits_ran), ]
s5.test = s5.100k.wlimits_ran[train_nrows_100k:   nrow(s5.100k.wlimits_ran), ]
s6.test = s6.250k.wlimits_ran[train_nrows_250k:   nrow(s6.250k.wlimits_ran), ]
query1_alldata = dbSendQuery(mydb, 'SELECT
*
FROM GSU.ML_FinProj_GothamCab_Train
WHERE speed IS NOT NULL
AND duration != 0
AND duration < 5000
AND speed < 1000
ORDER BY RAND()
LIMIT 10000;')
data.random.sample = fetch(query1_alldata, n = -1)
s7.random.sample = data.random.sample[,2:12]
iter.index = c()
list.train.rse = c()
list.test.rse  = c()
list.test.ran.data.rse = c()
index_count = 1
for (i in seq(0.2, 0.0025, -.0025)){
# Train Model
print('------------------------------------------------------------------------------')
print(paste('Training model for iteration => ', i))
m0.train       =    rpart(duration ~ ., data = s6.train, method = 'anova',
control = rpart.control(cp = .i, minsplit = 5, minbucket = 5, maxdepth = 10))
m0.residuals   =  residuals(m0.train)
m0.train.rse   =  sqrt(sum(m0.residuals^2) / (length(m0.residuals)-2))
list.train.rss[index_count] = m0.train.rse
# Generate Prediction - Test Model
print(paste('Generating Prediction For CP => ', i))
m0.prediction = predict(m0.train, s6.test)
m0.test.rse   = sqrt(sum((s6.test$duration - m0.prediction)^2) - (length(s6.test$duration) -2))
list.test.rse[index_count] = m0.test.rse
# Generate Prediction - Completely New Test Set
print(paste('Generating Prediction For CP => ', i, ' Using Completely New Test Set'))
m1.prediction = predict(m0.train, s7.random.sample)
m1.test.rse   = sqrt(sum((s7.random.sample$duration - m1.prediction)^2) - (length(s7.test$duration) -2))
list.test.ran.data.rse[index_count] = m1.test.rse
# Increate Count Index
index_count = index_count + 1
print('------------------------------------------------------------------------------')
for (i in seq(0.2, 0.0025, -.0025)){
# Train Model
print('------------------------------------------------------------------------------')
print(paste('Training model for iteration => ', i))
m0.train       =    rpart(duration ~ ., data = s6.train, method = 'anova',
control = rpart.control(cp = .i, minsplit = 5, minbucket = 5, maxdepth = 10))
m0.residuals   =  residuals(m0.train)
m0.train.rse   =  sqrt(sum(m0.residuals^2) / (length(m0.residuals)-2))
list.train.rss[index_count] = m0.train.rse
# Generate Prediction - Test Model
print(paste('Generating Prediction For CP => ', i))
m0.prediction = predict(m0.train, s6.test)
m0.test.rse   = sqrt(sum((s6.test$duration - m0.prediction)^2) - (length(s6.test$duration) -2))
list.test.rse[index_count] = m0.test.rse
# Generate Prediction - Completely New Test Set
print(paste('Generating Prediction For CP => ', i, ' Using Completely New Test Set'))
m1.prediction = predict(m0.train, s7.random.sample)
m1.test.rse   = sqrt(sum((s7.random.sample$duration - m1.prediction)^2) - (length(s7.test$duration) -2))
list.test.ran.data.rse[index_count] = m1.test.rse
# Increate Count Index
index_count = index_count + 1
print('------------------------------------------------------------------------------')
}
print('hello world')
