# Random Forest - Test Number of Trees
list.ntrees = c()
list.oob.rse = c()
list.test.rse = c()
rf_num_trees = function(data.train, data.test, ntrees.from, ntrees.to, ntrees.step, list.ntrees, list.oob.rse, list.test.rse, Count){
for (i in seq(ntrees.from, ntrees.to, ntrees.step)){
# Train Model
m0 = ranger(duration ~., data = data.train, num.trees = i)
# Generate OOB RSE
m0.oob.rse            = sqrt(m1$prediction.error)
list.oob.rse[Count]   <<- m1.oob.rse
# Generate Prediction Using New Sample Data
m0.predict            = predict(m0, data.test)
# Calculate Test RSE
m0.test.rse           = sqrt(sum((data.test$duration - m0.predict$predictions)^2) / (length(m0.predict$predictions)-2))
list.test.rse[Count]  <<- m1.test.rse
# Increase Count
Count                 <<- Count + 1
# Return Model
return(m0)
}
}
m2.rf = rf_num_trees(s6.250k.wlimits_ran, s3.250k.nolimits_ran, 100, 500, 100, list.ntrees, list.oob.rse, list.test.rse, Count)
rf_num_trees = function(data.train, data.test, ntrees.from, ntrees.to, ntrees.step, list.ntrees, list.oob.rse, list.test.rse, Count){
for (i in seq(ntrees.from, ntrees.to, ntrees.step)){
# Train Model
print('Training Model')
m0 = ranger(duration ~., data = data.train, num.trees = i)
# Generate OOB RSE
print('Generating OOB RSE')
m0.oob.rse            = sqrt(m0$prediction.error)
list.oob.rse[Count]   <<- m0.oob.rse
# Generate Prediction Using New Sample Data
print('Generating Test Prediction')
m0.predict            = predict(m0, data.test)
# Calculate Test RSE
print('Generating Test RSE')
m0.test.rse           = sqrt(sum((data.test$duration - m0.predict$predictions)^2) / (length(m0.predict$predictions)-2))
list.test.rse[Count]  <<- m0.test.rse
# Increase Count
Count                 <<- Count + 1
# Return Model
print('Model Completed.  Returning model object to user')
return(m0)
}
}
m2.rf = rf_num_trees(s6.250k.wlimits_ran, s3.250k.nolimits_ran, 100, 500, 100, list.ntrees, list.oob.rse, list.test.rse, Count)
rf_num_trees = function(data.train, data.test, ntrees.from, ntrees.to, ntrees.step, list.ntrees, list.oob.rse, list.test.rse, Count){
for (i in seq(ntrees.from, ntrees.to, ntrees.step)){
# Train Model
print(paste('Training Model Using Ntrees => ', i))
m0 = ranger(duration ~., data = data.train, num.trees = i)
# Generate OOB RSE
print('Generating OOB RSE')
m0.oob.rse            = sqrt(m0$prediction.error)
list.oob.rse[Count]   <<- m0.oob.rse
# Generate Prediction Using New Sample Data
print('Generating Test Prediction')
m0.predict            = predict(m0, data.test)
# Calculate Test RSE
print('Generating Test RSE')
m0.test.rse           = sqrt(sum((data.test$duration - m0.predict$predictions)^2) / (length(m0.predict$predictions)-2))
list.test.rse[Count]  <<- m0.test.rse
# Increase Count
Count                 <<- Count + 1
# Return Model
print('Model Completed.  Returning model object to user')
print('-----------------------------------------------------------------------------')
return(m0)
}
}
print('hello world')
list.ntrees
rf_num_trees = function(data.train, data.test, ntrees.from, ntrees.to, ntrees.step, list.ntrees, list.oob.rse, list.test.rse, Count){
for (i in seq(ntrees.from, ntrees.to, ntrees.step)){
# Train Model
print(paste('Training Model Using Ntrees => ', i))
m0 = ranger(duration ~., data = data.train, num.trees = i)
# Generate OOB RSE
print('Generating OOB RSE')
m0.oob.rse            = sqrt(m0$prediction.error)
list.oob.rse[Count]   <<- m0.oob.rse
# Generate Prediction Using New Sample Data
print('Generating Test Prediction')
m0.predict            = predict(m0, data.test)
# Calculate Test RSE
print('Generating Test RSE')
m0.test.rse           = sqrt(sum((data.test$duration - m0.predict$predictions)^2) / (length(m0.predict$predictions)-2))
list.test.rse[Count]  <<- m0.test.rse
# Increase Count
Count                 <<- Count + 1
# Return Model
print('Model Completed.  Returning model object to user')
print('-----------------------------------------------------------------------------')
return(m0)
}
}
m2.rf = rf_num_trees(s6.250k.wlimits_ran, s3.250k.nolimits_ran, 100, 500, 100, list.ntrees, list.oob.rse, list.test.rse, Count)
list.ntrees
list.ntrees = c()
list.oob.rse = c()
list.test.rse = c()
Count = 1
rf_num_trees = function(data.train, data.test, ntrees.from, ntrees.to, ntrees.step, list.ntrees, list.oob.rse, list.test.rse, Count){
for (i in seq(ntrees.from, ntrees.to, ntrees.step)){
# Train Model
print(paste('Training Model Using Ntrees => ', i))
m0 = ranger(duration ~., data = data.train, num.trees = i)
# Generate OOB RSE
print('Generating OOB RSE')
m0.oob.rse            = sqrt(m0$prediction.error)
list.oob.rse[Count]   <<- m0.oob.rse
# Generate Prediction Using New Sample Data
print('Generating Test Prediction')
m0.predict            = predict(m0, data.test)
# Calculate Test RSE
print('Generating Test RSE')
m0.test.rse           = sqrt(sum((data.test$duration - m0.predict$predictions)^2) / (length(m0.predict$predictions)-2))
list.test.rse[Count]  <<- m0.test.rse
# Increase Count
Count                 <<- Count + 1
# Return Model
print('Model Completed.  Returning model object to user')
print('-----------------------------------------------------------------------------')
return(m0)
}
}
m2.rf = rf_num_trees(s6.250k.wlimits_ran, s3.250k.nolimits_ran,
ntrees.from = 100,
ntrees.to   = 500,
ntrees.step = 100,
list.ntrees, list.oob.rse, list.test.rse, Count)
for (i in seq(100, 500, 100)){
print(i)
}
test.shit(100, 500, 100)
test.shit = function(A, B, C){
for (i in seq(A, B, C)){
print(i)
}}
test.shit(100, 500, 100)
rf_num_trees = function(data.train, data.test, ntrees.from, ntrees.to, ntrees.step, list.ntrees, list.oob.rse, list.test.rse, Count){
for (i in seq(100, 500, 100)){
# Train Model
print(paste('Training Model Using Ntrees => ', i))
m0 = ranger(duration ~., data = data.train, num.trees = i)
# Generate OOB RSE
print('Generating OOB RSE')
m0.oob.rse            = sqrt(m0$prediction.error)
list.oob.rse[Count]   <<- m0.oob.rse
print(paste('OOB RSE => ', m0.oob.rse))
# Generate Prediction Using New Sample Data
print('Generating Test Prediction')
m0.predict            = predict(m0, data.test)
# Calculate Test RSE
print('Generating Test RSE')
m0.test.rse           = sqrt(sum((data.test$duration - m0.predict$predictions)^2) / (length(m0.predict$predictions)-2))
list.test.rse[Count]  <<- m0.test.rse
print(paste('Test RSE =>', m0.test.rse))
# Increase Count
Count                 <<- Count + 1
# Return Model
print('Model Completed.  Returning model object to user')
print('-----------------------------------------------------------------------------')
return(m0)
}
}
m2.rf = rf_num_trees(s6.250k.wlimits_ran, s3.250k.nolimits_ran,
ntrees.from = 100,
ntrees.to   = 500,
ntrees.step = 100,
list.ntrees, list.oob.rse, list.test.rse, Count)
rf_num_trees = function(data.train, data.test, ntrees.from, ntrees.to, ntrees.step, list.ntrees, list.oob.rse, list.test.rse, Count){
for (i in seq(ntrees.from, ntrees.to, ntrees.step)){
# Train Model
print(paste('Training Model Using Ntrees => ', i))
m0 = ranger(duration ~., data = data.train, num.trees = i)
# Generate OOB RSE
print('Generating OOB RSE')
m0.oob.rse            = sqrt(m0$prediction.error)
list.oob.rse[Count]   <<- m0.oob.rse
print(paste('OOB RSE => ', m0.oob.rse))
# Generate Prediction Using New Sample Data
print('Generating Test Prediction')
m0.predict            = predict(m0, data.test)
# Calculate Test RSE
print('Generating Test RSE')
m0.test.rse           = sqrt(sum((data.test$duration - m0.predict$predictions)^2) / (length(m0.predict$predictions)-2))
list.test.rse[Count]  <<- m0.test.rse
print(paste('Test RSE =>', m0.test.rse))
# Increase Count
Count                 <<- Count + 1
# Return Model
print('Model Completed.  Returning model object to user')
print('-----------------------------------------------------------------------------')
# Return Model
return(m0)
}
}
list.ntrees = c()
list.oob.rse = c()
list.test.rse = c()
Count = 1
m2.rf = rf_num_trees(s6.250k.wlimits_ran, s3.250k.nolimits_ran,
ntrees.from = 100,
ntrees.to   = 500,
ntrees.step = 100,
list.ntrees, list.oob.rse, list.test.rse, Count)
rf_num_trees = function(data.train, data.test, ntrees.from, ntrees.to, ntrees.step, list.ntrees, list.oob.rse, list.test.rse, Count){
for (i in seq(ntrees.from, ntrees.to, ntrees.step)){
# Train Model
print(paste('Training Model Using Ntrees => ', i))
m0 = ranger(duration ~., data = data.train, num.trees = i)
# Generate OOB RSE
print('Generating OOB RSE')
m0.oob.rse            = sqrt(m0$prediction.error)
list.oob.rse[Count]   <<- m0.oob.rse
print(paste('OOB RSE => ', m0.oob.rse))
# Generate Prediction Using New Sample Data
print('Generating Test Prediction')
m0.predict            = predict(m0, data.test)
# Calculate Test RSE
print('Generating Test RSE')
m0.test.rse           = sqrt(sum((data.test$duration - m0.predict$predictions)^2) / (length(m0.predict$predictions)-2))
list.test.rse[Count]  <<- m0.test.rse
print(paste('Test RSE =>', m0.test.rse))
# Increase Count
Count                 <<- Count + 1
# Return Model
print('Model Completed.  Returning model object to user')
print('-----------------------------------------------------------------------------')
}
}
rf_num_trees = function(data.train, data.test, list.ntrees, list.oob.rse, list.test.rse, Count, i){
# Train Model
print(paste('Training Model Using Ntrees => ', i))
m0 = ranger(duration ~., data = data.train, num.trees = i)
# Generate OOB RSE
print('Generating OOB RSE')
m0.oob.rse            = sqrt(m0$prediction.error)
list.oob.rse[Count]   <<- m0.oob.rse
print(paste('OOB RSE => ', m0.oob.rse))
# Generate Prediction Using New Sample Data
print('Generating Test Prediction')
m0.predict            = predict(m0, data.test)
# Calculate Test RSE
print('Generating Test RSE')
m0.test.rse           = sqrt(sum((data.test$duration - m0.predict$predictions)^2) / (length(m0.predict$predictions)-2))
list.test.rse[Count]  <<- m0.test.rse
print(paste('Test RSE =>', m0.test.rse))
# Increase Count
Count                 <<- Count + 1
# Return Model
print('Model Completed.  Returning model object to user')
print('-----------------------------------------------------------------------------')
}
for (i in seq(100, 500, 100)){
rf_num_trees(s6.250k.wlimits_ran, s3.250k.nolimits_ran, list.ntrees, list.oob.rse, list.test.rse, Count, i)
}
list.ntrees
list.oob.rse
list.test.rse
list.ntrees = c(100, 200, 300, 400, 500)
df$ntrees = list.ntrees
#Create DataFrame
df = data.frame(row.names = list.ntrees)
df$oob.rse     = list.oob.rse
Count
list.oob.rse
list.ntrees = c(100, 200, 300, 400, 500)
#Create DataFrame
df = data.frame(row.names = list.ntrees)
df$oob.rse     = list.oob.rse[2:6]
df$test.rse    = list.test.rse[2:6]
p = ggplot() +
geom_line(data = df, aes(x = list.ntrees, y = df$oob.rse, color = 'OOB RSE')) +
geom_line(data = df, aes(x = list.ntrees, y = df$test.rse, color = 'Test RSE')) +
xlab('Number of Trees & RSE') +
ylab('RSE')
print(p+ ggtitle('Simple Decision Tree - Training vs Test RSE'))
list.ntrees = c()
list.oob.rse = c()
list.test.rse = c()
Count = 1
rf_num_trees = function(data.train, data.test, list.ntrees, list.oob.rse, list.test.rse, Count, i){
list.ntrees[Count] = i
# Train Model
print(paste('Training Model Using Ntrees => ', i))
m0 = ranger(duration ~., data = data.train, num.trees = i)
# Generate OOB RSE
print('Generating OOB RSE')
m0.oob.rse            = round(sqrt(m0$prediction.error),4)
list.oob.rse[Count]   <<- m0.oob.rse
print(paste('OOB RSE => ', m0.oob.rse))
# Generate Prediction Using New Sample Data
print('Generating Test Prediction')
m0.predict            = predict(m0, data.test)
# Calculate Test RSE
print('Generating Test RSE')
m0.test.rse           = round(sqrt(sum((data.test$duration - m0.predict$predictions)^2) / (length(m0.predict$predictions)-2)),4)
list.test.rse[Count]  <<- m0.test.rse
print(paste('Test RSE =>', m0.test.rse))
# Increase Count
Count                 <<- Count + 1
# Return Model
print('Model Completed.  Returning model object to user')
print('-----------------------------------------------------------------------------')
}
# Run over sequence
for (i in seq(100, 400, 100)){
rf_num_trees(s6.250k.wlimits_ran, s1.50k.nolimits, list.ntrees, list.oob.rse, list.test.rse, Count, i)
}
df = data.frame(row.names = list.ntrees)
df$oob.rse     = list.oob.rse[2:6]
df$test.rse    = list.test.rse[2:6]
#Create DataFrame
df = data.frame(row.names = list.ntrees)
df$oob.rse     = list.oob.rse
df$test.rse    = list.test.rse
list.ntrees
list.ntrees = c(100,200,300,400)
#Create DataFrame
df = data.frame(row.names = list.ntrees)
df$oob.rse     = list.oob.rse
df$test.rse    = list.test.rse
p = ggplot() +
geom_line(data = df, aes(x = list.ntrees, y = df$oob.rse, color = 'OOB RSE')) +
geom_line(data = df, aes(x = list.ntrees, y = df$test.rse, color = 'Test RSE')) +
xlab('Number of Trees') +
ylab('RSE')
print(p+ ggtitle('RANDOM FOREST - TRAINING & TEST RSE'))
?ranger()
# Run over sequence
col.names(s1.50k.nolimits)
# Run over sequence
colnames(s1.50k.nolimits)
# Run over sequence
ncolnames = length(colnames(s1.50k.nolimits))
ncolnames
list.nmtry = c()
list.oob.rse = c()
list.test.rse = c()
Count = 1
rf_num_trees = function(data.train, data.test, list.ntrees, list.oob.rse, list.test.rse, Count, i){
'i = number of mtry.  Should be a range of 1-p'
# Update
list.nmtry[Count]     <<- i
# Train Model
print(paste('Training Model Using N-MTRY => ', i))
m0 = ranger(duration ~., data = data.train, num.trees = 200, mtry = i)
# Generate OOB RSE
print('Generating OOB RSE')
m0.oob.rse            = round(sqrt(m0$prediction.error),4)
list.oob.rse[Count]   <<- m0.oob.rse
print(paste('OOB RSE => ', m0.oob.rse))
# Generate Prediction Using New Sample Data
print('Generating Test Prediction')
m0.predict            = predict(m0, data.test)
# Calculate Test RSE
print('Generating Test RSE')
m0.test.rse           = round(sqrt(sum((data.test$duration - m0.predict$predictions)^2) / (length(m0.predict$predictions)-2)),4)
list.test.rse[Count]  <<- m0.test.rse
print(paste('Test RSE =>', m0.test.rse))
# Increase Count
Count                 <<- Count + 1
# Return Model
print('Model Completed.  Returning model object to user')
print('-----------------------------------------------------------------------------')
}
# Run over sequence
ncolnames = length(colnames(s1.50k.nolimits))
# Iterate over number of mtry
for (i in seq(1, ncolnames, 1)){
rf_num_trees(s6.250k.wlimits_ran, s1.50k.nolimits, list.nmtry, list.oob.rse, list.test.rse, Count, i)
}
list.nmtry
#Create DataFrame
df = data.frame(row.names = list.nmtry[1:10])
df$oob.rse     = list.oob.rse
df$test.rse    = list.test.rse
df
# Graph Results
p = ggplot() +
geom_line(data = df, aes(x = list.ntrees, y = df$oob.rse, color = 'OOB RSE')) +
geom_line(data = df, aes(x = list.ntrees, y = df$test.rse, color = 'Test RSE')) +
xlab('Number of Features') +
ylab('RSE')
print(p+ ggtitle('RANDOM FOREST - TRAINING & TEST RSE'))
p = ggplot() +
geom_line(data = df, aes(x = list.ntrees[1:10], y = df$oob.rse, color = 'OOB RSE')) +
geom_line(data = df, aes(x = list.ntrees[1:10], y = df$test.rse, color = 'Test RSE')) +
xlab('Number of Features') +
ylab('RSE')
print(p+ ggtitle('RANDOM FOREST - TRAINING & TEST RSE'))
p = ggplot() +
geom_line(data = df, aes(x = list.nmtry[1:10], y = df$oob.rse, color = 'OOB RSE')) +
geom_line(data = df, aes(x = list.nmtry[1:10], y = df$test.rse, color = 'Test RSE')) +
xlab('Number of Features') +
ylab('RSE')
print(p+ ggtitle('RANDOM FOREST - TRAINING & TEST RSE'))
?ranger()
# Test Number of Trees
list.alpha = c()
list.oob.rse = c()
list.test.rse = c()
Count = 1
'i = value for alpha.'
# Update
list.alpha[Count]     <<- i
# Train Model
print(paste('Training Model Using Alpha => ', i))
m0 = ranger(duration ~., data = data.train, num.trees = 200, mtry = 10, alpha = i)
# Generate OOB RSE
print('Generating OOB RSE')
m0.oob.rse            = round(sqrt(m0$prediction.error),4)
list.oob.rse[Count]   <<- m0.oob.rse
print(paste('OOB RSE => ', m0.oob.rse))
# Generate Prediction Using New Sample Data
print('Generating Test Prediction')
m0.predict            = predict(m0, data.test)
# Calculate Test RSE
print('Generating Test RSE')
m0.test.rse           = round(sqrt(sum((data.test$duration - m0.predict$predictions)^2) / (length(m0.predict$predictions)-2)),4)
list.test.rse[Count]  <<- m0.test.rse
print(paste('Test RSE =>', m0.test.rse))
# Increase Count
Count                 <<- Count + 1
# Return Model
print('Model Completed.  Returning model object to user')
print('-----------------------------------------------------------------------------')
}
rf_num_trees = function(data.train, data.test, list.ntrees, list.oob.rse, list.test.rse, Count, i){
'i = value for alpha.'
# Update
list.alpha[Count]     <<- i
# Train Model
print(paste('Training Model Using Alpha => ', i))
m0 = ranger(duration ~., data = data.train, num.trees = 200, mtry = 10, alpha = i)
# Generate OOB RSE
print('Generating OOB RSE')
m0.oob.rse            = round(sqrt(m0$prediction.error),4)
list.oob.rse[Count]   <<- m0.oob.rse
print(paste('OOB RSE => ', m0.oob.rse))
# Generate Prediction Using New Sample Data
print('Generating Test Prediction')
m0.predict            = predict(m0, data.test)
# Calculate Test RSE
print('Generating Test RSE')
m0.test.rse           = round(sqrt(sum((data.test$duration - m0.predict$predictions)^2) / (length(m0.predict$predictions)-2)),4)
list.test.rse[Count]  <<- m0.test.rse
print(paste('Test RSE =>', m0.test.rse))
# Increase Count
Count                 <<- Count + 1
# Return Model
print('Model Completed.  Returning model object to user')
print('-----------------------------------------------------------------------------')
}
for (i in seq(0.5, 0.01, -0.01)){
print(i)
}
for (i in seq(0.5, 0.01, -0.1)){
print(i)
}
# Iterate over number of mtry
for (i in seq(0.5, 0.01, -0.1)){
rf_num_trees(s6.250k.wlimits_ran, s1.50k.nolimits, list.nmtry, list.oob.rse, list.test.rse, Count, i)
}
df = data.frame(row.names = list.alpha)
df$oob.rse     = list.oob.rse
df$test.rse    = list.test.rse
# Graph Results
p = ggplot() +
geom_line(data = df, aes(x = list.alpha, y = df$oob.rse, color = 'OOB RSE')) +
geom_line(data = df, aes(x = list.alpha, y = df$test.rse, color = 'Test RSE')) +
xlab('ALPHA') +
ylab('RSE')
print(p+ ggtitle('RANDOM FOREST - TRAINING & TEST RSE'))
list.oob.rse
list.alpha = c()
list.oob.rse = c()
list.test.rse = c()
Count = 1
rf_num_trees = function(data.train, data.test, list.ntrees, list.oob.rse, list.test.rse, Count, i){
'i = value for alpha.'
# Update
list.alpha[Count]     <<- i
# Train Model
print(paste('Training Model Using Alpha => ', i))
m0 = ranger(duration ~., data = data.train, num.trees = 200, mtry = 10, alpha = i)
# Generate OOB RSE
print('Generating OOB RSE')
m0.oob.rse            = round(sqrt(m0$prediction.error),4)
list.oob.rse[Count]   <<- m0.oob.rse
print(paste('OOB RSE => ', m0.oob.rse))
# Generate Prediction Using New Sample Data
print('Generating Test Prediction')
m0.predict            = predict(m0, data.test)
# Calculate Test RSE
print('Generating Test RSE')
m0.test.rse           = round(sqrt(sum((data.test$duration - m0.predict$predictions)^2) / (length(m0.predict$predictions)-2)),4)
list.test.rse[Count]  <<- m0.test.rse
print(paste('Test RSE =>', m0.test.rse))
# Increase Count
Count                 <<- Count + 1
# Return Model
print('Model Completed.  Returning model object to user')
print('-----------------------------------------------------------------------------')
}
# Iterate over number of mtry
for (i in seq(0.5, 0.01, -0.1)){
rf_num_trees(s6.250k.wlimits_ran, s1.50k.nolimits, list.nmtry, list.oob.rse, list.test.rse, Count, i)
}
